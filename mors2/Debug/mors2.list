
mors2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000884c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bac  08008bac  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb4  08008bb4  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          00001d74  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f90  20001f90  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a07b  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3d  00000000  00000000  0003a2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0003de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a8  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025499  00000000  00000000  00040ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7d8  00000000  00000000  00065f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d5f  00000000  00000000  00083759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001564b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062b0  00000000  00000000  00156508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000021c 	.word	0x2000021c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089bc 	.word	0x080089bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000220 	.word	0x20000220
 80001c4:	080089bc 	.word	0x080089bc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <trex>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void trex(){ // matches the short and long pushes with letters
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	for(int x=0;x<36;x++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e02c      	b.n	8000556 <trex+0x66>
		if(strcmp(dinosaur,morsecode[x]) == 0){
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <trex+0x78>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	4619      	mov	r1, r3
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <trex+0x7c>)
 8000508:	f7ff fe5e 	bl	80001c8 <strcmp>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d11e      	bne.n	8000550 <trex+0x60>
				CDC_Transmit_FS(symbols[x],strlen(symbols[x]));
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <trex+0x80>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <trex+0x80>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe5a 	bl	80001dc <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	b29b      	uxth	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	4620      	mov	r0, r4
 8000530:	f007 fdae 	bl	8008090 <CDC_Transmit_FS>
				for(int y=0;y<6;y++){ //clears the array to get the next letter
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	e007      	b.n	800054a <trex+0x5a>
					dinosaur[y]='\0'; }
 800053a:	4a0c      	ldr	r2, [pc, #48]	; (800056c <trex+0x7c>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
				for(int y=0;y<6;y++){ //clears the array to get the next letter
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b05      	cmp	r3, #5
 800054e:	ddf4      	ble.n	800053a <trex+0x4a>
	for(int x=0;x<36;x++){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b23      	cmp	r3, #35	; 0x23
 800055a:	ddcf      	ble.n	80004fc <trex+0xc>
											  }
						 }
			}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bd90      	pop	{r4, r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	20000378 	.word	0x20000378
 8000570:	20000090 	.word	0x20000090

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fca6 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f812 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f944 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f878 	bl	8000678 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8a4 	bl	80006d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f8d2 	bl	8000734 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000590:	f000 f906 	bl	80007a0 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8000594:	f007 fcbe 	bl	8007f14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim7);
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <main+0x2c>)
 800059a:	f003 ff21 	bl	80043e0 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x2a>
 80005a0:	2000032c 	.word	0x2000032c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f008 f9fa 	bl	80089ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f83c 	bl	80036a8 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000636:	f000 fa69 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fa9d 	bl	8003b98 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 fa52 	bl	8000b0c <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 ff95 	bl	80015e4 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 fa24 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000238 	.word	0x20000238
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_I2S3_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_I2S3_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_I2S3_Init+0x54>)
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <MX_I2S3_Init+0x5c>)
 80006fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2S3_Init+0x54>)
 8000714:	f001 f8aa 	bl	800186c <HAL_I2S_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071e:	f000 f9f5 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000028c 	.word	0x2000028c
 800072c:	40003c00 	.word	0x40003c00
 8000730:	00017700 	.word	0x00017700

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f003 fd53 	bl	8004230 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f9bc 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200002d4 	.word	0x200002d4
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */
  /* USER CODE END TIM7_Init 0 */
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM7_Init 1 */
  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM7_Init+0x64>)
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_TIM7_Init+0x68>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_TIM7_Init+0x64>)
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_TIM7_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_TIM7_Init+0x64>)
 80007c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_TIM7_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM7_Init+0x64>)
 80007d2:	f003 fdb6 	bl	8004342 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007dc:	f000 f996 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM7_Init+0x64>)
 80007ee:	f003 feff 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f988 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /* USER CODE END TIM7_Init 2 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000032c 	.word	0x2000032c
 8000808:	40001400 	.word	0x40001400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a79      	ldr	r2, [pc, #484]	; (8000a10 <MX_GPIO_Init+0x204>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b73      	ldr	r3, [pc, #460]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a72      	ldr	r2, [pc, #456]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a6b      	ldr	r2, [pc, #428]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <MX_GPIO_Init+0x204>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <MX_GPIO_Init+0x204>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a64      	ldr	r2, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <MX_GPIO_Init+0x204>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5d      	ldr	r2, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x204>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MX_GPIO_Init+0x204>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <MX_GPIO_Init+0x204>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a56      	ldr	r2, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x204>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <MX_GPIO_Init+0x204>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4851      	ldr	r0, [pc, #324]	; (8000a14 <MX_GPIO_Init+0x208>)
 80008d0:	f000 fe56 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	484f      	ldr	r0, [pc, #316]	; (8000a18 <MX_GPIO_Init+0x20c>)
 80008da:	f000 fe51 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|orange_Pin|red_Pin|blue_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e4:	484d      	ldr	r0, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x210>)
 80008e6:	f000 fe4b 	bl	8001580 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <MX_GPIO_Init+0x208>)
 8000902:	f000 fc89 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483e      	ldr	r0, [pc, #248]	; (8000a18 <MX_GPIO_Init+0x20c>)
 800091e:	f000 fc7b 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	; (8000a18 <MX_GPIO_Init+0x20c>)
 800093e:	f000 fc6b 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000946:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4832      	ldr	r0, [pc, #200]	; (8000a20 <MX_GPIO_Init+0x214>)
 8000958:	f000 fc5e 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : button2_Pin */
  GPIO_InitStruct.Pin = button2_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	482b      	ldr	r0, [pc, #172]	; (8000a20 <MX_GPIO_Init+0x214>)
 8000972:	f000 fc51 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000976:	2304      	movs	r3, #4
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4826      	ldr	r0, [pc, #152]	; (8000a24 <MX_GPIO_Init+0x218>)
 800098a:	f000 fc45 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a0:	2305      	movs	r3, #5
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481e      	ldr	r0, [pc, #120]	; (8000a24 <MX_GPIO_Init+0x218>)
 80009ac:	f000 fc34 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin orange_Pin red_Pin blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_Pin|orange_Pin|red_Pin|blue_Pin
 80009b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <MX_GPIO_Init+0x210>)
 80009ca:	f000 fc25 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ce:	2320      	movs	r3, #32
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <MX_GPIO_Init+0x210>)
 80009e2:	f000 fc19 	bl	8001218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2006      	movs	r0, #6
 80009ec:	f000 fbdd 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f0:	2006      	movs	r0, #6
 80009f2:	f000 fbf6 	bl	80011e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fbd5 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a00:	2007      	movs	r0, #7
 8000a02:	f000 fbee 	bl	80011e2 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	uint32_t taym;
	int egg;
	if(GPIO_Pin==button_Pin){
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d149      	bne.n	8000acc <HAL_GPIO_EXTI_Callback+0xa4>
		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin)){
 8000a38:	2101      	movs	r1, #1
 8000a3a:	482f      	ldr	r0, [pc, #188]	; (8000af8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000a3c:	f000 fd88 	bl	8001550 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00b      	beq.n	8000a5e <HAL_GPIO_EXTI_Callback+0x36>
			(TIM7->CNT)=0;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
			egg=0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a56:	482a      	ldr	r0, [pc, #168]	; (8000b00 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a58:	f000 fd92 	bl	8001580 <HAL_GPIO_WritePin>
 8000a5c:	e036      	b.n	8000acc <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else{
			taym=(TIM7->CNT); //gets the pressed time
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a62:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4825      	ldr	r0, [pc, #148]	; (8000b00 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a6c:	f000 fd88 	bl	8001580 <HAL_GPIO_WritePin>
			(TIM7->CNT)=0;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24

		if(taym>60 && taym<400){
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b3c      	cmp	r3, #60	; 0x3c
 8000a7a:	d90d      	bls.n	8000a98 <HAL_GPIO_EXTI_Callback+0x70>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a82:	d209      	bcs.n	8000a98 <HAL_GPIO_EXTI_Callback+0x70>
			dinosaur[i]=shortt;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000a8a:	212e      	movs	r1, #46	; 0x2e
 8000a8c:	54d1      	strb	r1, [r2, r3]
			i++;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a96:	6013      	str	r3, [r2, #0]
			}
		if(taym>399){
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a9e:	d309      	bcc.n	8000ab4 <HAL_GPIO_EXTI_Callback+0x8c>
			dinosaur[i]=longg;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000aa6:	215f      	movs	r1, #95	; 0x5f
 8000aa8:	54d1      	strb	r1, [r2, r3]
			i++;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ab2:	6013      	str	r3, [r2, #0]
				  }
		if(i==4 || egg){
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d002      	beq.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x9a>
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <HAL_GPIO_EXTI_Callback+0xa4>
			trex(); //transmits the letter
 8000ac2:	f7ff fd15 	bl	80004f0 <trex>
	  		i=0;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
		}
		}
	}
	if(GPIO_Pin==button2_Pin){ //to transmit the letter if input(short/long pushes) are less then 4 ticks
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d10d      	bne.n	8000aee <HAL_GPIO_EXTI_Callback+0xc6>
		egg=1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
		if(i==4 || egg){
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d002      	beq.n	8000ae4 <HAL_GPIO_EXTI_Callback+0xbc>
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d004      	beq.n	8000aee <HAL_GPIO_EXTI_Callback+0xc6>
			trex(); //transmits the letter
 8000ae4:	f7ff fd04 	bl	80004f0 <trex>
			i=0;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
	 }
	}
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40001400 	.word	0x40001400
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	20000374 	.word	0x20000374
 8000b08:	20000378 	.word	0x20000378

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 fb1c 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_I2C_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12c      	bne.n	8000be4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ba6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <HAL_I2C_MspInit+0x8c>)
 8000bc4:	f000 fb28 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_I2S_MspInit+0xf0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d15a      	bne.n	8000cde <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c2c:	23c0      	movs	r3, #192	; 0xc0
 8000c2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 f9b9 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c44:	f7ff ff62 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cac:	2306      	movs	r3, #6
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <HAL_I2S_MspInit+0xf8>)
 8000cb8:	f000 faae 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_I2S_MspInit+0xfc>)
 8000cda:	f000 fa9d 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	; 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40003c00 	.word	0x40003c00
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_SPI_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d52:	23e0      	movs	r3, #224	; 0xe0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d6e:	f000 fa53 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10d      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40001400 	.word	0x40001400
 8000dc8:	40023800 	.word	0x40023800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f8a8 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fbc5 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button2_Pin);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f000 fbbe 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <OTG_FS_IRQHandler+0x10>)
 8000e42:	f001 fb03 	bl	800244c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20001864 	.word	0x20001864

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 fd5f 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb65 	bl	8000574 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8000eb8:	08008bbc 	.word	0x08008bbc
  ldr r2, =_sbss
 8000ebc:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8000ec0:	20001f90 	.word	0x20001f90

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe0c 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000120 	.word	0x20000120
 8000f64:	20000128 	.word	0x20000128
 8000f68:	20000124 	.word	0x20000124

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000128 	.word	0x20000128
 8000f90:	20000380 	.word	0x20000380

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000380 	.word	0x20000380

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000128 	.word	0x20000128

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e16b      	b.n	800150c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 815a 	bne.w	8001506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80b4 	beq.w	8001506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b60      	ldr	r3, [pc, #384]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a5f      	ldr	r2, [pc, #380]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_GPIO_Init+0x310>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x314>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02b      	beq.n	800143e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x318>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	; (8001534 <HAL_GPIO_Init+0x31c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x320>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x324>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x216>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x328>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x212>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x20e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x330>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x20a>
 800141e:	2307      	movs	r3, #7
 8001420:	e00e      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001422:	2308      	movs	r3, #8
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001426:	2306      	movs	r3, #6
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x310>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_GPIO_Init+0x334>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_GPIO_Init+0x334>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_GPIO_Init+0x334>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_GPIO_Init+0x334>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_GPIO_Init+0x334>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_GPIO_Init+0x334>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae90 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021c00 	.word	0x40021c00
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa28 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e12b      	b.n	800184e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff faac 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2224      	movs	r2, #36	; 0x24
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001648:	f002 fc9e 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 800164c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a81      	ldr	r2, [pc, #516]	; (8001858 <HAL_I2C_Init+0x274>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d807      	bhi.n	8001668 <HAL_I2C_Init+0x84>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a80      	ldr	r2, [pc, #512]	; (800185c <HAL_I2C_Init+0x278>)
 800165c:	4293      	cmp	r3, r2
 800165e:	bf94      	ite	ls
 8001660:	2301      	movls	r3, #1
 8001662:	2300      	movhi	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e006      	b.n	8001676 <HAL_I2C_Init+0x92>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a7d      	ldr	r2, [pc, #500]	; (8001860 <HAL_I2C_Init+0x27c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	bf94      	ite	ls
 8001670:	2301      	movls	r3, #1
 8001672:	2300      	movhi	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0e7      	b.n	800184e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4a78      	ldr	r2, [pc, #480]	; (8001864 <HAL_I2C_Init+0x280>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a6a      	ldr	r2, [pc, #424]	; (8001858 <HAL_I2C_Init+0x274>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d802      	bhi.n	80016b8 <HAL_I2C_Init+0xd4>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3301      	adds	r3, #1
 80016b6:	e009      	b.n	80016cc <HAL_I2C_Init+0xe8>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a69      	ldr	r2, [pc, #420]	; (8001868 <HAL_I2C_Init+0x284>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	3301      	adds	r3, #1
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	495c      	ldr	r1, [pc, #368]	; (8001858 <HAL_I2C_Init+0x274>)
 80016e8:	428b      	cmp	r3, r1
 80016ea:	d819      	bhi.n	8001720 <HAL_I2C_Init+0x13c>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e59      	subs	r1, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016fa:	1c59      	adds	r1, r3, #1
 80016fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001700:	400b      	ands	r3, r1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <HAL_I2C_Init+0x138>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e59      	subs	r1, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fbb1 f3f3 	udiv	r3, r1, r3
 8001714:	3301      	adds	r3, #1
 8001716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171a:	e051      	b.n	80017c0 <HAL_I2C_Init+0x1dc>
 800171c:	2304      	movs	r3, #4
 800171e:	e04f      	b.n	80017c0 <HAL_I2C_Init+0x1dc>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_I2C_Init+0x168>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	fbb0 f3f3 	udiv	r3, r0, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	e012      	b.n	8001772 <HAL_I2C_Init+0x18e>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e58      	subs	r0, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	0099      	lsls	r1, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001762:	3301      	adds	r3, #1
 8001764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x196>
 8001776:	2301      	movs	r3, #1
 8001778:	e022      	b.n	80017c0 <HAL_I2C_Init+0x1dc>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <HAL_I2C_Init+0x1bc>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1e58      	subs	r0, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	fbb0 f3f3 	udiv	r3, r0, r3
 8001794:	3301      	adds	r3, #1
 8001796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179e:	e00f      	b.n	80017c0 <HAL_I2C_Init+0x1dc>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	6809      	ldr	r1, [r1, #0]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6911      	ldr	r1, [r2, #16]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68d2      	ldr	r2, [r2, #12]
 80017fa:	4311      	orrs	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	000186a0 	.word	0x000186a0
 800185c:	001e847f 	.word	0x001e847f
 8001860:	003d08ff 	.word	0x003d08ff
 8001864:	431bde83 	.word	0x431bde83
 8001868:	10624dd3 	.word	0x10624dd3

0800186c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e128      	b.n	8001ad0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a90      	ldr	r2, [pc, #576]	; (8001ad8 <HAL_I2S_Init+0x26c>)
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff f9ad 	bl	8000bf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018b4:	f023 030f 	bic.w	r3, r3, #15
 80018b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d060      	beq.n	800198c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018d2:	2310      	movs	r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e001      	b.n	80018dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018d8:	2320      	movs	r3, #32
 80018da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d802      	bhi.n	80018ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f002 fc42 	bl	8004174 <HAL_RCCEx_GetPeriphCLKFreq>
 80018f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fa:	d125      	bne.n	8001948 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	fbb2 f2f3 	udiv	r2, r2, r3
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	3305      	adds	r3, #5
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	e01f      	b.n	8001966 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	3305      	adds	r3, #5
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e00e      	b.n	8001966 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	3305      	adds	r3, #5
 8001964:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4a5c      	ldr	r2, [pc, #368]	; (8001adc <HAL_I2S_Init+0x270>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	e003      	b.n	8001994 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800198c:	2302      	movs	r3, #2
 800198e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d902      	bls.n	80019a0 <HAL_I2S_Init+0x134>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d907      	bls.n	80019b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e08f      	b.n	8001ad0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	ea42 0103 	orr.w	r1, r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019ce:	f023 030f 	bic.w	r3, r3, #15
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6851      	ldr	r1, [r2, #4]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6892      	ldr	r2, [r2, #8]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68d2      	ldr	r2, [r2, #12]
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6992      	ldr	r2, [r2, #24]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d161      	bne.n	8001ac0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <HAL_I2S_Init+0x274>)
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a37      	ldr	r2, [pc, #220]	; (8001ae4 <HAL_I2S_Init+0x278>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2S_Init+0x1a4>
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_I2S_Init+0x27c>)
 8001a0e:	e001      	b.n	8001a14 <HAL_I2S_Init+0x1a8>
 8001a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4932      	ldr	r1, [pc, #200]	; (8001ae4 <HAL_I2S_Init+0x278>)
 8001a1c:	428a      	cmp	r2, r1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2S_Init+0x1b8>
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_I2S_Init+0x27c>)
 8001a22:	e001      	b.n	8001a28 <HAL_I2S_Init+0x1bc>
 8001a24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a2c:	f023 030f 	bic.w	r3, r3, #15
 8001a30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <HAL_I2S_Init+0x278>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2S_Init+0x1d4>
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_I2S_Init+0x27c>)
 8001a3e:	e001      	b.n	8001a44 <HAL_I2S_Init+0x1d8>
 8001a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a44:	2202      	movs	r2, #2
 8001a46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	; (8001ae4 <HAL_I2S_Init+0x278>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_I2S_Init+0x1ea>
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_I2S_Init+0x27c>)
 8001a54:	e001      	b.n	8001a5a <HAL_I2S_Init+0x1ee>
 8001a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a66:	d003      	beq.n	8001a70 <HAL_I2S_Init+0x204>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	e001      	b.n	8001a7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_I2S_Init+0x278>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2S_Init+0x24c>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_I2S_Init+0x27c>)
 8001ab6:	e001      	b.n	8001abc <HAL_I2S_Init+0x250>
 8001ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001abc:	897a      	ldrh	r2, [r7, #10]
 8001abe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	08001be3 	.word	0x08001be3
 8001adc:	cccccccd 	.word	0xcccccccd
 8001ae0:	08001cf9 	.word	0x08001cf9
 8001ae4:	40003800 	.word	0x40003800
 8001ae8:	40003400 	.word	0x40003400

08001aec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	1c9a      	adds	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10e      	bne.n	8001b7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffb8 	bl	8001aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	b292      	uxth	r2, r2
 8001b98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	1c9a      	adds	r2, r3, #2
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10e      	bne.n	8001bda <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff93 	bl	8001b00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d13a      	bne.n	8001c74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d109      	bne.n	8001c1c <I2S_IRQHandler+0x3a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d102      	bne.n	8001c1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffb4 	bl	8001b84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d126      	bne.n	8001c74 <I2S_IRQHandler+0x92>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d11f      	bne.n	8001c74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff50 	bl	8001b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d136      	bne.n	8001cee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d109      	bne.n	8001c9e <I2S_IRQHandler+0xbc>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	2b80      	cmp	r3, #128	; 0x80
 8001c96:	d102      	bne.n	8001c9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff45 	bl	8001b28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d122      	bne.n	8001cee <I2S_IRQHandler+0x10c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d11b      	bne.n	8001cee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff13 	bl	8001b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a92      	ldr	r2, [pc, #584]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d12:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d14:	e001      	b.n	8001d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a8b      	ldr	r2, [pc, #556]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d30:	4b8a      	ldr	r3, [pc, #552]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d32:	e001      	b.n	8001d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d44:	d004      	beq.n	8001d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8099 	bne.w	8001e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f925 	bl	8001fb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f9c8 	bl	8002114 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
 8001d8c:	d13a      	bne.n	8001e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d035      	beq.n	8001e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001da4:	e001      	b.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4969      	ldr	r1, [pc, #420]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001db2:	428b      	cmp	r3, r1
 8001db4:	d101      	bne.n	8001dba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001db6:	4b69      	ldr	r3, [pc, #420]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001db8:	e001      	b.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe88 	bl	8001b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	f040 80c3 	bne.w	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80bd 	beq.w	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e36:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e38:	e001      	b.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4944      	ldr	r1, [pc, #272]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e46:	428b      	cmp	r3, r1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e4a:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0204 	orr.w	r2, r3, #4
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fe4a 	bl	8001b14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e80:	e089      	b.n	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d107      	bne.n	8001e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8be 	bl	8002018 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8fd 	bl	80020b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d12f      	bne.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d02a      	beq.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ee6:	e001      	b.n	8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4919      	ldr	r1, [pc, #100]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001efa:	e001      	b.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f043 0202 	orr.w	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fdfa 	bl	8001b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d136      	bne.n	8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d031      	beq.n	8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f40:	e001      	b.n	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4902      	ldr	r1, [pc, #8]	; (8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	d106      	bne.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f52:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f54:	e006      	b.n	8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f56:	bf00      	nop
 8001f58:	40003800 	.word	0x40003800
 8001f5c:	40003400 	.word	0x40003400
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f043 0204 	orr.w	r2, r3, #4
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdc0 	bl	8001b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	e000      	b.n	8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f96:	bf00      	nop
}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c99      	adds	r1, r3, #2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d106      	bne.n	800200e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffc9 	bl	8001fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c99      	adds	r1, r3, #2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6251      	str	r1, [r2, #36]	; 0x24
 800202a:	8819      	ldrh	r1, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <I2SEx_TxISR_I2SExt+0x22>
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <I2SEx_TxISR_I2SExt+0x94>)
 8002038:	e001      	b.n	800203e <I2SEx_TxISR_I2SExt+0x26>
 800203a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203e:	460a      	mov	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <I2SEx_TxISR_I2SExt+0x50>
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <I2SEx_TxISR_I2SExt+0x94>)
 8002066:	e001      	b.n	800206c <I2SEx_TxISR_I2SExt+0x54>
 8002068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002074:	428b      	cmp	r3, r1
 8002076:	d101      	bne.n	800207c <I2SEx_TxISR_I2SExt+0x64>
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <I2SEx_TxISR_I2SExt+0x94>)
 800207a:	e001      	b.n	8002080 <I2SEx_TxISR_I2SExt+0x68>
 800207c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002084:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff81 	bl	8001fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40003800 	.word	0x40003800
 80020ac:	40003400 	.word	0x40003400

080020b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68d8      	ldr	r0, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	1c99      	adds	r1, r3, #2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020c8:	b282      	uxth	r2, r0
 80020ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d113      	bne.n	800210c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff4a 	bl	8001fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <I2SEx_RxISR_I2SExt+0x90>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <I2SEx_RxISR_I2SExt+0x16>
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002128:	e001      	b.n	800212e <I2SEx_RxISR_I2SExt+0x1a>
 800212a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	1c99      	adds	r1, r3, #2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	62d1      	str	r1, [r2, #44]	; 0x2c
 800213a:	b282      	uxth	r2, r0
 800213c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d121      	bne.n	800219a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <I2SEx_RxISR_I2SExt+0x90>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <I2SEx_RxISR_I2SExt+0x50>
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002162:	e001      	b.n	8002168 <I2SEx_RxISR_I2SExt+0x54>
 8002164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <I2SEx_RxISR_I2SExt+0x90>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d101      	bne.n	8002178 <I2SEx_RxISR_I2SExt+0x64>
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002176:	e001      	b.n	800217c <I2SEx_RxISR_I2SExt+0x68>
 8002178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800217c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002180:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff03 	bl	8001fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40003800 	.word	0x40003800
 80021a8:	40003400 	.word	0x40003400

080021ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b08f      	sub	sp, #60	; 0x3c
 80021b0:	af0a      	add	r7, sp, #40	; 0x28
 80021b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e10f      	b.n	80023de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f006 f8a1 	bl	8008320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fb88 	bl	8004912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	687e      	ldr	r6, [r7, #4]
 800220a:	466d      	mov	r5, sp
 800220c:	f106 0410 	add.w	r4, r6, #16
 8002210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002220:	1d33      	adds	r3, r6, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	6838      	ldr	r0, [r7, #0]
 8002226:	f002 fa5f 	bl	80046e8 <USB_CoreInit>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fb76 	bl	8004934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e04a      	b.n	80022e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333d      	adds	r3, #61	; 0x3d
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	333c      	adds	r3, #60	; 0x3c
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	b298      	uxth	r0, r3
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3344      	adds	r3, #68	; 0x44
 800228a:	4602      	mov	r2, r0
 800228c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3340      	adds	r3, #64	; 0x40
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3348      	adds	r3, #72	; 0x48
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	334c      	adds	r3, #76	; 0x4c
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3354      	adds	r3, #84	; 0x54
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	3301      	adds	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3af      	bcc.n	800224e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e044      	b.n	800237e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	3301      	adds	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3b5      	bcc.n	80022f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	687e      	ldr	r6, [r7, #4]
 8002390:	466d      	mov	r5, sp
 8002392:	f106 0410 	add.w	r4, r6, #16
 8002396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a6:	1d33      	adds	r3, r6, #4
 80023a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f002 fb0e 	bl	80049cc <USB_DevInit>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00d      	b.n	80023de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fc5d 	bl	8005c96 <USB_DevDisconnect>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_Start+0x1c>
 80023fe:	2302      	movs	r3, #2
 8002400:	e020      	b.n	8002444 <HAL_PCD_Start+0x5e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	2b01      	cmp	r3, #1
 8002410:	d109      	bne.n	8002426 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002416:	2b01      	cmp	r3, #1
 8002418:	d005      	beq.n	8002426 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fa60 	bl	80048f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fc0d 	bl	8005c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b08d      	sub	sp, #52	; 0x34
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fccb 	bl	8005dfe <USB_GetMode>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 848a 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fc2f 	bl	8005cd8 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8480 	beq.w	8002d82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fc1c 	bl	8005cd8 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d107      	bne.n	80024ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f002 0202 	and.w	r2, r2, #2
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fc0a 	bl	8005cd8 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d161      	bne.n	8002592 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0210 	bic.w	r2, r2, #16
 80024dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	0c5b      	lsrs	r3, r3, #17
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	2b02      	cmp	r3, #2
 8002508:	d124      	bne.n	8002554 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d035      	beq.n	8002582 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6a38      	ldr	r0, [r7, #32]
 800252a:	f003 fa41 	bl	80059b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	441a      	add	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254c:	441a      	add	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	621a      	str	r2, [r3, #32]
 8002552:	e016      	b.n	8002582 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	2b06      	cmp	r3, #6
 800255e:	d110      	bne.n	8002582 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	6a38      	ldr	r0, [r7, #32]
 800256c:	f003 fa20 	bl	80059b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	6a1a      	ldr	r2, [r3, #32]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257c:	441a      	add	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0210 	orr.w	r2, r2, #16
 8002590:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fb9e 	bl	8005cd8 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a6:	f040 80a7 	bne.w	80026f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fba3 	bl	8005cfe <USB_ReadDevAllOutEpInterrupt>
 80025b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025ba:	e099      	b.n	80026f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 808e 	beq.w	80026e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fbc7 	bl	8005d66 <USB_ReadDevOutEPInterrupt>
 80025d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f0:	461a      	mov	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fec3 	bl	8003384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	2308      	movs	r3, #8
 8002618:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800261a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 ff99 	bl	8003554 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	2310      	movs	r3, #16
 800263c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d030      	beq.n	80026aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b80      	cmp	r3, #128	; 0x80
 8002652:	d109      	bne.n	8002668 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002666:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	78db      	ldrb	r3, [r3, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f005 ff58 	bl	8008548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	461a      	mov	r2, r3
 80026a6:	2302      	movs	r3, #2
 80026a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	2320      	movs	r3, #32
 80026c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3301      	adds	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f af62 	bne.w	80025bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 faeb 	bl	8005cd8 <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270c:	f040 80db 	bne.w	80028c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fb0c 	bl	8005d32 <USB_ReadDevAllInEpInterrupt>
 800271a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002720:	e0cd      	b.n	80028be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80c2 	beq.w	80028b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fb32 	bl	8005da2 <USB_ReadDevInEPInterrupt>
 800273e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d057      	beq.n	80027fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2201      	movs	r2, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	69f9      	ldr	r1, [r7, #28]
 8002766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800276a:	4013      	ands	r3, r2
 800276c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d132      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	; 0x4c
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4403      	add	r3, r0
 80027a8:	3348      	adds	r3, #72	; 0x48
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4419      	add	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	334c      	adds	r3, #76	; 0x4c
 80027be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3354      	adds	r3, #84	; 0x54
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e6:	461a      	mov	r2, r3
 80027e8:	2101      	movs	r1, #1
 80027ea:	f003 fb39 	bl	8005e60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f005 fe22 	bl	800843e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002810:	461a      	mov	r2, r3
 8002812:	2308      	movs	r3, #8
 8002814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282c:	461a      	mov	r2, r3
 800282e:	2310      	movs	r3, #16
 8002830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002848:	461a      	mov	r2, r3
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d023      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6a38      	ldr	r0, [r7, #32]
 800285c:	f002 fa1a 	bl	8004c94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	3338      	adds	r3, #56	; 0x38
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	78db      	ldrb	r3, [r3, #3]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d108      	bne.n	800288e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f005 fe6f 	bl	800856c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289a:	461a      	mov	r2, r3
 800289c:	2302      	movs	r3, #2
 800289e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fcdb 	bl	8003268 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af2e 	bne.w	8002722 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fa04 	bl	8005cd8 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028da:	d122      	bne.n	8002922 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002902:	2100      	movs	r1, #0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fec3 	bl	8003690 <HAL_PCDEx_LPM_Callback>
 800290a:	e002      	b.n	8002912 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f005 fe0d 	bl	800852c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f9d6 	bl	8005cd8 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002936:	d112      	bne.n	800295e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f005 fdc9 	bl	80084e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800295c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f003 f9b8 	bl	8005cd8 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	f040 80b7 	bne.w	8002ae4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2110      	movs	r1, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f002 f97f 	bl	8004c94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299a:	e046      	b.n	8002a2a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a8:	461a      	mov	r2, r3
 80029aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c0:	0151      	lsls	r1, r2, #5
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	440a      	add	r2, r1
 80029c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	3301      	adds	r3, #1
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3b3      	bcc.n	800299c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a60:	f043 030b 	orr.w	r3, r3, #11
 8002a64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a76:	f043 030b 	orr.w	r3, r3, #11
 8002a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7c:	e015      	b.n	8002aaa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa4:	f043 030b 	orr.w	r3, r3, #11
 8002aa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002abc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f003 f9c6 	bl	8005e60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f8f5 	bl	8005cd8 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d124      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 f98b 	bl	8005e1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 f940 	bl	8004d8e <USB_GetDevSpeed>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	f001 fa29 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8002b1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f001 fe3f 	bl	80047ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 fcad 	bl	800848e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 f8c5 	bl	8005cd8 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d10a      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f005 fc8a 	bl	8008472 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f002 0208 	and.w	r2, r2, #8
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 f8b0 	bl	8005cd8 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d122      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8e:	2301      	movs	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	e014      	b.n	8002bbe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fb27 	bl	8003206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	3301      	adds	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3e5      	bcc.n	8002b94 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f883 	bl	8005cd8 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bdc:	d13b      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bde:	2301      	movs	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e02b      	b.n	8002c3c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3340      	adds	r3, #64	; 0x40
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d115      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da12      	bge.n	8002c36 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fae8 	bl	8003206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	3301      	adds	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3ce      	bcc.n	8002be4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f83c 	bl	8005cd8 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6a:	d155      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e045      	b.n	8002cfe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12e      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da2b      	bge.n	8002cf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002cac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d121      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf4:	6053      	str	r3, [r2, #4]
            break;
 8002cf6:	e007      	b.n	8002d08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d3b4      	bcc.n	8002c72 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 ffdb 	bl	8005cd8 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d10a      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f005 fc2e 	bl	8008590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 ffc5 	bl	8005cd8 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d115      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f005 fc1e 	bl	80085ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e000      	b.n	8002d84 <HAL_PCD_IRQHandler+0x938>
      return;
 8002d82:	bf00      	nop
    }
  }
}
 8002d84:	3734      	adds	r7, #52	; 0x34
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_PCD_SetAddress+0x1a>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e013      	b.n	8002dcc <HAL_PCD_SetAddress+0x42>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 ff23 	bl	8005c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	70fb      	strb	r3, [r7, #3]
 8002de6:	460b      	mov	r3, r1
 8002de8:	803b      	strh	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da0f      	bge.n	8002e1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3338      	adds	r3, #56	; 0x38
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
 8002e18:	e00f      	b.n	8002e3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e46:	883a      	ldrh	r2, [r7, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	78ba      	ldrb	r2, [r7, #2]
 8002e50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e64:	78bb      	ldrb	r3, [r7, #2]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d102      	bne.n	8002e70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_PCD_EP_Open+0xaa>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e00e      	b.n	8002e9c <HAL_PCD_EP_Open+0xc8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 ffa3 	bl	8004dd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da0f      	bge.n	8002ed8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3338      	adds	r3, #56	; 0x38
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	705a      	strb	r2, [r3, #1]
 8002ed6:	e00f      	b.n	8002ef8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_Close+0x6e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_Close+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 ffe1 	bl	8004ee8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2200      	movs	r2, #0
 8002f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6979      	ldr	r1, [r7, #20]
 8002fac:	f002 fac0 	bl	8005530 <USB_EP0StartXfer>
 8002fb0:	e008      	b.n	8002fc4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6979      	ldr	r1, [r7, #20]
 8002fc0:	f002 f86e 	bl	80050a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ff0:	681b      	ldr	r3, [r3, #0]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	460b      	mov	r3, r1
 800300c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3338      	adds	r3, #56	; 0x38
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2201      	movs	r2, #1
 800303c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	b2da      	uxtb	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	f002 fa5e 	bl	8005530 <USB_EP0StartXfer>
 8003074:	e008      	b.n	8003088 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	f002 f80c 	bl	80050a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d901      	bls.n	80030b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e050      	b.n	8003152 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0f      	bge.n	80030d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3338      	adds	r3, #56	; 0x38
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
 80030d6:	e00d      	b.n	80030f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_EP_SetStall+0x82>
 8003110:	2302      	movs	r3, #2
 8003112:	e01e      	b.n	8003152 <HAL_PCD_EP_SetStall+0xc0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fc9c 	bl	8005a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	b2d9      	uxtb	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003142:	461a      	mov	r2, r3
 8003144:	f002 fe8c 	bl	8005e60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e042      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0f      	bge.n	80031a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3338      	adds	r3, #56	; 0x38
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	705a      	strb	r2, [r3, #1]
 800319e:	e00f      	b.n	80031c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_ClrStall+0x86>
 80031dc:	2302      	movs	r3, #2
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fca4 	bl	8005b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0c      	bge.n	8003234 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 020f 	and.w	r2, r3, #15
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	3338      	adds	r3, #56	; 0x38
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e00c      	b.n	800324e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fac3 	bl	80057e0 <USB_EPStopXfer>
 800325a:	4603      	mov	r3, r0
 800325c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800325e:	7afb      	ldrb	r3, [r7, #11]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d901      	bls.n	80032a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e06c      	b.n	800337a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d902      	bls.n	80032bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3303      	adds	r3, #3
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032c4:	e02b      	b.n	800331e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3303      	adds	r3, #3
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	4603      	mov	r3, r0
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f002 fb17 	bl	8005934 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	441a      	add	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	441a      	add	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	b29b      	uxth	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	429a      	cmp	r2, r3
 8003332:	d809      	bhi.n	8003348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333c:	429a      	cmp	r2, r3
 800333e:	d203      	bcs.n	8003348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1be      	bne.n	80032c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	429a      	cmp	r2, r3
 8003352:	d811      	bhi.n	8003378 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	2201      	movs	r2, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	43db      	mvns	r3, r3
 800336e:	6939      	ldr	r1, [r7, #16]
 8003370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003374:	4013      	ands	r3, r2
 8003376:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	333c      	adds	r3, #60	; 0x3c
 800339c:	3304      	adds	r3, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d17b      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4a61      	ldr	r2, [pc, #388]	; (800354c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	f240 80b9 	bls.w	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80b3 	beq.w	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	461a      	mov	r2, r3
 80033e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	e0a7      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	461a      	mov	r2, r3
 8003408:	2320      	movs	r3, #32
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	e098      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8093 	bne.w	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a4b      	ldr	r2, [pc, #300]	; (800354c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d90f      	bls.n	8003442 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	6093      	str	r3, [r2, #8]
 8003440:	e07e      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	440b      	add	r3, r1
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d114      	bne.n	80034a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800348c:	461a      	mov	r2, r3
 800348e:	2101      	movs	r1, #1
 8003490:	f002 fce6 	bl	8005e60 <USB_EP0_OutStart>
 8003494:	e006      	b.n	80034a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	441a      	add	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 ffac 	bl	8008408 <HAL_PCD_DataOutStageCallback>
 80034b0:	e046      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d124      	bne.n	8003504 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	461a      	mov	r2, r3
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	e032      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	461a      	mov	r2, r3
 80034f2:	2320      	movs	r3, #32
 80034f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f004 ff83 	bl	8008408 <HAL_PCD_DataOutStageCallback>
 8003502:	e01d      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d114      	bne.n	8003534 <PCD_EP_OutXfrComplete_int+0x1b0>
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800352c:	461a      	mov	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	f002 fc96 	bl	8005e60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f004 ff64 	bl	8008408 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	4f54300a 	.word	0x4f54300a
 8003550:	4f54310a 	.word	0x4f54310a

08003554 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	333c      	adds	r3, #60	; 0x3c
 800356c:	3304      	adds	r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d90e      	bls.n	80035a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	461a      	mov	r2, r3
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f004 ff1b 	bl	80083e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <PCD_EP_OutSetupPacket_int+0x88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d90c      	bls.n	80035d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d108      	bne.n	80035d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035c8:	461a      	mov	r2, r3
 80035ca:	2101      	movs	r1, #1
 80035cc:	f002 fc48 	bl	8005e60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	4f54300a 	.word	0x4f54300a

080035e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
 80035ec:	4613      	mov	r3, r2
 80035ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035fe:	883b      	ldrh	r3, [r7, #0]
 8003600:	0419      	lsls	r1, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	430a      	orrs	r2, r1
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
 800360c:	e028      	b.n	8003660 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e00d      	b.n	800363e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	3340      	adds	r3, #64	; 0x40
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4413      	add	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	3301      	adds	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	3b01      	subs	r3, #1
 8003644:	429a      	cmp	r2, r3
 8003646:	d3ec      	bcc.n	8003622 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003648:	883b      	ldrh	r3, [r7, #0]
 800364a:	0418      	lsls	r0, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	3b01      	subs	r3, #1
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4302      	orrs	r2, r0
 8003658:	3340      	adds	r3, #64	; 0x40
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e267      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d075      	beq.n	80037b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d00c      	beq.n	80036ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036de:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d10b      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x108>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d157      	bne.n	80037b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e242      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x74>
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6c      	ldr	r2, [pc, #432]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 8003740:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fc18 	bl	8000f94 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd fc14 	bl	8000f94 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e207      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b5b      	ldr	r3, [pc, #364]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xc0>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd fc04 	bl	8000f94 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd fc00 	bl	8000f94 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1f3      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0xe8>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d6:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1c7      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x244>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fbb9 	bl	8000f94 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd fbb5 	bl	8000f94 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1a8      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4925      	ldr	r1, [pc, #148]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_OscConfig+0x244>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fb98 	bl	8000f94 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003868:	f7fd fb94 	bl	8000f94 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e187      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d036      	beq.n	8003900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCC_OscConfig+0x248>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fb78 	bl	8000f94 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fd fb74 	bl	8000f94 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e167      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x200>
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_OscConfig+0x248>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fd fb61 	bl	8000f94 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fd fb5d 	bl	8000f94 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d907      	bls.n	80038f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e150      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470000 	.word	0x42470000
 80038f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ea      	bne.n	80038d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8097 	beq.w	8003a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b7d      	ldr	r3, [pc, #500]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a7c      	ldr	r2, [pc, #496]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b7a      	ldr	r3, [pc, #488]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b77      	ldr	r3, [pc, #476]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394a:	4b74      	ldr	r3, [pc, #464]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a73      	ldr	r2, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003956:	f7fd fb1d 	bl	8000f94 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395e:	f7fd fb19 	bl	8000f94 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e10c      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x2ea>
 8003984:	4b64      	ldr	r3, [pc, #400]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	; 0x70
 8003990:	e01c      	b.n	80039cc <HAL_RCC_OscConfig+0x324>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x30c>
 800399a:	4b5f      	ldr	r3, [pc, #380]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a5e      	ldr	r2, [pc, #376]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a5b      	ldr	r2, [pc, #364]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0x324>
 80039b4:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a54      	ldr	r2, [pc, #336]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f023 0304 	bic.w	r3, r3, #4
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d015      	beq.n	8003a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fade 	bl	8000f94 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fada 	bl	8000f94 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0cb      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <HAL_RCC_OscConfig+0x334>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fd fac8 	bl	8000f94 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fd fac4 	bl	8000f94 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0b5      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ee      	bne.n	8003a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80a1 	beq.w	8003b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d05c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d141      	bne.n	8003ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fd fa98 	bl	8000f94 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fa94 	bl	8000f94 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e087      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	491b      	ldr	r1, [pc, #108]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fa6d 	bl	8000f94 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fa69 	bl	8000f94 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e05c      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x416>
 8003adc:	e054      	b.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fa56 	bl	8000f94 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd fa52 	bl	8000f94 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e045      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x444>
 8003b0a:	e03d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e038      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x4ec>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d028      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d121      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d11a      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b54:	4013      	ands	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d111      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d044      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d119      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fd f984 	bl	8000f94 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fd f980 	bl	8000f94 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20c      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f8e4 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08008b94 	.word	0x08008b94
 8003d5c:	20000120 	.word	0x20000120
 8003d60:	20000124 	.word	0x20000124

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b094      	sub	sp, #80	; 0x50
 8003d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	2300      	movs	r3, #0
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d74:	2300      	movs	r3, #0
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d7c:	4b79      	ldr	r3, [pc, #484]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d00d      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x40>
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	f200 80e1 	bhi.w	8003f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x34>
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d96:	e0db      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d9c:	e0db      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da2:	e0d8      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dae:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dba:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dce:	2300      	movs	r3, #0
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	f04f 0000 	mov.w	r0, #0
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	0159      	lsls	r1, r3, #5
 8003de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de8:	0150      	lsls	r0, r2, #5
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4621      	mov	r1, r4
 8003df0:	1a51      	subs	r1, r2, r1
 8003df2:	6139      	str	r1, [r7, #16]
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e08:	4659      	mov	r1, fp
 8003e0a:	018b      	lsls	r3, r1, #6
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e12:	4651      	mov	r1, sl
 8003e14:	018a      	lsls	r2, r1, #6
 8003e16:	4651      	mov	r1, sl
 8003e18:	ebb2 0801 	subs.w	r8, r2, r1
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e36:	4690      	mov	r8, r2
 8003e38:	4699      	mov	r9, r3
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	eb18 0303 	adds.w	r3, r8, r3
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	462b      	mov	r3, r5
 8003e44:	eb49 0303 	adc.w	r3, r9, r3
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e56:	4629      	mov	r1, r5
 8003e58:	024b      	lsls	r3, r1, #9
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e60:	4621      	mov	r1, r4
 8003e62:	024a      	lsls	r2, r1, #9
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e74:	f7fc f9ba 	bl	80001ec <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	e058      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
 8003e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0159      	lsls	r1, r3, #5
 8003eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eae:	0150      	lsls	r0, r2, #5
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eba:	4649      	mov	r1, r9
 8003ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	00eb      	lsls	r3, r5, #3
 8003ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eea:	00e2      	lsls	r2, r4, #3
 8003eec:	4614      	mov	r4, r2
 8003eee:	461d      	mov	r5, r3
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	18e3      	adds	r3, r4, r3
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	eb45 0303 	adc.w	r3, r5, r3
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	028b      	lsls	r3, r1, #10
 8003f0e:	4621      	mov	r1, r4
 8003f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f14:	4621      	mov	r1, r4
 8003f16:	028a      	lsls	r2, r1, #10
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	61fa      	str	r2, [r7, #28]
 8003f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f28:	f7fc f960 	bl	80001ec <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4613      	mov	r3, r2
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3750      	adds	r7, #80	; 0x50
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000120 	.word	0x20000120

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08008ba4 	.word	0x08008ba4

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd8:	4b62      	ldr	r3, [pc, #392]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fde:	f7fc ffd9 	bl	8000f94 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe6:	f7fc ffd5 	bl	8000f94 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0b0      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	019a      	lsls	r2, r3, #6
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	071b      	lsls	r3, r3, #28
 8004010:	4955      	ldr	r1, [pc, #340]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004018:	4b52      	ldr	r3, [pc, #328]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800401e:	f7fc ffb9 	bl	8000f94 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004026:	f7fc ffb5 	bl	8000f94 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e090      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8083 	beq.w	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4b44      	ldr	r3, [pc, #272]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a43      	ldr	r2, [pc, #268]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800406e:	4b3f      	ldr	r3, [pc, #252]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a3e      	ldr	r2, [pc, #248]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800407a:	f7fc ff8b 	bl	8000f94 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fc ff87 	bl	8000f94 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e062      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004094:	4b35      	ldr	r3, [pc, #212]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d028      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d114      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fc ff55 	bl	8000f94 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fc ff51 	bl	8000f94 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e02a      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411c:	d10d      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	490d      	ldr	r1, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
 8004138:	e005      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004140:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004144:	6093      	str	r3, [r2, #8]
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	4905      	ldr	r1, [pc, #20]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	42470068 	.word	0x42470068
 8004168:	40023800 	.word	0x40023800
 800416c:	40007000 	.word	0x40007000
 8004170:	42470e40 	.word	0x42470e40

08004174 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d13e      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004192:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d12f      	bne.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041aa:	617b      	str	r3, [r7, #20]
          break;
 80041ac:	e02f      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ba:	d108      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e007      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	0f1b      	lsrs	r3, r3, #28
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
          break;
 8004206:	e002      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
          break;
 800420c:	bf00      	nop
        }
      }
      break;
 800420e:	bf00      	nop
    }
  }
  return frequency;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	4618      	mov	r0, r3
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	00bb8000 	.word	0x00bb8000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	00f42400 	.word	0x00f42400

08004230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07b      	b.n	800433a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d009      	beq.n	8004268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
 800425a:	e005      	b.n	8004268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fd38 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	ea42 0103 	orr.w	r1, r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f003 0104 	and.w	r1, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0210 	and.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e041      	b.n	80043d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc fd0d 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f000 f895 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e046      	b.n	8004486 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_TIM_Base_Start+0xb4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004412:	d01d      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_TIM_Base_Start+0xb8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_TIM_Base_Start+0xbc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_TIM_Base_Start+0xc0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_TIM_Base_Start+0xc4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_TIM_Base_Start+0xc8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_Base_Start+0x70>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_TIM_Base_Start+0xcc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d111      	bne.n	8004474 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d010      	beq.n	8004484 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e007      	b.n	8004484 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40001800 	.word	0x40001800

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e05a      	b.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d01d      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10c      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046e8:	b084      	sub	sp, #16
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	f107 001c 	add.w	r0, r7, #28
 80046f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d122      	bne.n	8004746 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f001 fbee 	bl	8005f1c <USB_CoreReset>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e01a      	b.n	800477c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f001 fbe2 	bl	8005f1c <USB_CoreReset>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
 800476e:	e005      	b.n	800477c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10b      	bne.n	800479a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f043 0206 	orr.w	r2, r3, #6
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800479a:	7bfb      	ldrb	r3, [r7, #15]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a6:	b004      	add	sp, #16
 80047a8:	4770      	bx	lr
	...

080047ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d165      	bne.n	800488c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a41      	ldr	r2, [pc, #260]	; (80048c8 <USB_SetTurnaroundTime+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d906      	bls.n	80047d6 <USB_SetTurnaroundTime+0x2a>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <USB_SetTurnaroundTime+0x120>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d202      	bcs.n	80047d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047d0:	230f      	movs	r3, #15
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e062      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <USB_SetTurnaroundTime+0x120>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d306      	bcc.n	80047ec <USB_SetTurnaroundTime+0x40>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d202      	bcs.n	80047ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047e6:	230e      	movs	r3, #14
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e057      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4a38      	ldr	r2, [pc, #224]	; (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d306      	bcc.n	8004802 <USB_SetTurnaroundTime+0x56>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a37      	ldr	r2, [pc, #220]	; (80048d4 <USB_SetTurnaroundTime+0x128>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d202      	bcs.n	8004802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047fc:	230d      	movs	r3, #13
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e04c      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a33      	ldr	r2, [pc, #204]	; (80048d4 <USB_SetTurnaroundTime+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d306      	bcc.n	8004818 <USB_SetTurnaroundTime+0x6c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a32      	ldr	r2, [pc, #200]	; (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004812:	230c      	movs	r3, #12
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e041      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d906      	bls.n	800482e <USB_SetTurnaroundTime+0x82>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <USB_SetTurnaroundTime+0x130>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d802      	bhi.n	800482e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004828:	230b      	movs	r3, #11
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e036      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <USB_SetTurnaroundTime+0x130>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d906      	bls.n	8004844 <USB_SetTurnaroundTime+0x98>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <USB_SetTurnaroundTime+0x134>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d802      	bhi.n	8004844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800483e:	230a      	movs	r3, #10
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e02b      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <USB_SetTurnaroundTime+0x134>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d906      	bls.n	800485a <USB_SetTurnaroundTime+0xae>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <USB_SetTurnaroundTime+0x138>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d202      	bcs.n	800485a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004854:	2309      	movs	r3, #9
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e020      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <USB_SetTurnaroundTime+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d306      	bcc.n	8004870 <USB_SetTurnaroundTime+0xc4>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d802      	bhi.n	8004870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800486a:	2308      	movs	r3, #8
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e015      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d906      	bls.n	8004886 <USB_SetTurnaroundTime+0xda>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <USB_SetTurnaroundTime+0x140>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d202      	bcs.n	8004886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004880:	2307      	movs	r3, #7
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00a      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004886:	2306      	movs	r3, #6
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e007      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004892:	2309      	movs	r3, #9
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e001      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004898:	2309      	movs	r3, #9
 800489a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	00d8acbf 	.word	0x00d8acbf
 80048cc:	00e4e1c0 	.word	0x00e4e1c0
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	01067380 	.word	0x01067380
 80048d8:	011a499f 	.word	0x011a499f
 80048dc:	01312cff 	.word	0x01312cff
 80048e0:	014ca43f 	.word	0x014ca43f
 80048e4:	016e3600 	.word	0x016e3600
 80048e8:	01a6ab1f 	.word	0x01a6ab1f
 80048ec:	01e84800 	.word	0x01e84800

080048f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004962:	2001      	movs	r0, #1
 8004964:	f7fc fb22 	bl	8000fac <HAL_Delay>
      ms++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 fa45 	bl	8005dfe <USB_GetMode>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d01e      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b31      	cmp	r3, #49	; 0x31
 800497e:	d9f0      	bls.n	8004962 <USB_SetCurrentMode+0x2e>
 8004980:	e01a      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d115      	bne.n	80049b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fc fb09 	bl	8000fac <HAL_Delay>
      ms++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fa2c 	bl	8005dfe <USB_GetMode>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b31      	cmp	r3, #49	; 0x31
 80049b0:	d9f0      	bls.n	8004994 <USB_SetCurrentMode+0x60>
 80049b2:	e001      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e005      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b32      	cmp	r3, #50	; 0x32
 80049bc:	d101      	bne.n	80049c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049cc:	b084      	sub	sp, #16
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e009      	b.n	8004a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0e      	cmp	r3, #14
 8004a04:	d9f2      	bls.n	80049ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11c      	bne.n	8004a46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
 8004a44:	e00b      	b.n	8004a5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a64:	461a      	mov	r2, r3
 8004a66:	2300      	movs	r3, #0
 8004a68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a70:	4619      	mov	r1, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	461a      	mov	r2, r3
 8004a7a:	680b      	ldr	r3, [r1, #0]
 8004a7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10c      	bne.n	8004a9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f965 	bl	8004d5c <USB_SetDevSpeed>
 8004a92:	e008      	b.n	8004aa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a94:	2101      	movs	r1, #1
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f960 	bl	8004d5c <USB_SetDevSpeed>
 8004a9c:	e003      	b.n	8004aa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f95b 	bl	8004d5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8f3 	bl	8004c94 <USB_FlushTxFifo>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f91f 	bl	8004cfc <USB_FlushRxFifo>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	461a      	mov	r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	e043      	b.n	8004b7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b08:	d118      	bne.n	8004b3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e013      	b.n	8004b4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	461a      	mov	r2, r3
 8004b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e008      	b.n	8004b4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3301      	adds	r3, #1
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d3b7      	bcc.n	8004af2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e043      	b.n	8004c10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b9e:	d118      	bne.n	8004bd2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e013      	b.n	8004be4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e008      	b.n	8004be4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	461a      	mov	r2, r3
 8004c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d3b7      	bcc.n	8004b88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f043 0210 	orr.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <USB_DevInit+0x2c4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f043 0208 	orr.w	r2, r3, #8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c8c:	b004      	add	sp, #16
 8004c8e:	4770      	bx	lr
 8004c90:	803c3800 	.word	0x803c3800

08004c94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <USB_FlushTxFifo+0x64>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e01b      	b.n	8004cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	daf2      	bge.n	8004ca2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	019b      	lsls	r3, r3, #6
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <USB_FlushTxFifo+0x64>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e006      	b.n	8004cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d0f0      	beq.n	8004ccc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	00030d40 	.word	0x00030d40

08004cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <USB_FlushRxFifo+0x5c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e018      	b.n	8004d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	daf2      	bge.n	8004d08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <USB_FlushRxFifo+0x5c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e006      	b.n	8004d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d0f0      	beq.n	8004d2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	00030d40 	.word	0x00030d40

08004d5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
 8004db2:	e00a      	b.n	8004dca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d002      	beq.n	8004dc0 <USB_GetDevSpeed+0x32>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d102      	bne.n	8004dc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	75fb      	strb	r3, [r7, #23]
 8004dc4:	e001      	b.n	8004dca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dc6:	230f      	movs	r3, #15
 8004dc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	785b      	ldrb	r3, [r3, #1]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d13a      	bne.n	8004e6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d155      	bne.n	8004ed8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	059b      	lsls	r3, r3, #22
 8004e4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e50:	4313      	orrs	r3, r2
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	e036      	b.n	8004ed8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d11a      	bne.n	8004ed8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d161      	bne.n	8004fc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1a:	d11f      	bne.n	8004f5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	0159      	lsls	r1, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	440b      	add	r3, r1
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <USB_DeactivateEndpoint+0x1b0>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
 8004fc6:	e060      	b.n	800508a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fde:	d11f      	bne.n	8005020 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ffe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	43db      	mvns	r3, r3
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	43db      	mvns	r3, r3
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005064:	4013      	ands	r3, r2
 8005066:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	440b      	add	r3, r1
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	4619      	mov	r1, r3
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <USB_DeactivateEndpoint+0x1b4>)
 8005086:	4013      	ands	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	ec337800 	.word	0xec337800
 800509c:	eff37800 	.word	0xeff37800

080050a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 815c 	bne.w	800537a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d132      	bne.n	8005130 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	440a      	add	r2, r1
 8005124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005128:	0cdb      	lsrs	r3, r3, #19
 800512a:	04db      	lsls	r3, r3, #19
 800512c:	6113      	str	r3, [r2, #16]
 800512e:	e074      	b.n	800521a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	0cdb      	lsrs	r3, r3, #19
 800514c:	04db      	lsls	r3, r3, #19
 800514e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800516e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6999      	ldr	r1, [r3, #24]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	440b      	add	r3, r1
 800518c:	1e59      	subs	r1, r3, #1
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	fbb1 f3f3 	udiv	r3, r1, r3
 8005196:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005198:	4b9d      	ldr	r3, [pc, #628]	; (8005410 <USB_EPStartXfer+0x370>)
 800519a:	400b      	ands	r3, r1
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	0148      	lsls	r0, r1, #5
 80051a0:	69f9      	ldr	r1, [r7, #28]
 80051a2:	4401      	add	r1, r0
 80051a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	0148      	lsls	r0, r1, #5
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	4401      	add	r1, r0
 80051ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ce:	4313      	orrs	r3, r2
 80051d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d11f      	bne.n	800521a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005218:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d14b      	bne.n	80052b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d128      	bne.n	8005296 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d110      	bne.n	8005276 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	e00f      	b.n	8005296 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e133      	b.n	8005520 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	791b      	ldrb	r3, [r3, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d015      	beq.n	800530c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 811b 	beq.w	8005520 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005306:	4313      	orrs	r3, r2
 8005308:	634b      	str	r3, [r1, #52]	; 0x34
 800530a:	e109      	b.n	8005520 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d110      	bne.n	800533e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e00f      	b.n	800535e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6919      	ldr	r1, [r3, #16]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	b298      	uxth	r0, r3
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	4603      	mov	r3, r0
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fade 	bl	8005934 <USB_WritePacket>
 8005378:	e0d2      	b.n	8005520 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005394:	0cdb      	lsrs	r3, r3, #19
 8005396:	04db      	lsls	r3, r3, #19
 8005398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d126      	bne.n	8005414 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	0148      	lsls	r0, r1, #5
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	4401      	add	r1, r0
 80053e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800540a:	6113      	str	r3, [r2, #16]
 800540c:	e03a      	b.n	8005484 <USB_EPStartXfer+0x3e4>
 800540e:	bf00      	nop
 8005410:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4413      	add	r3, r2
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	8afa      	ldrh	r2, [r7, #22]
 8005430:	fb03 f202 	mul.w	r2, r3, r2
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	8afb      	ldrh	r3, [r7, #22]
 8005448:	04d9      	lsls	r1, r3, #19
 800544a:	4b38      	ldr	r3, [pc, #224]	; (800552c <USB_EPStartXfer+0x48c>)
 800544c:	400b      	ands	r3, r1
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	0148      	lsls	r0, r1, #5
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	4401      	add	r1, r0
 8005456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800545a:	4313      	orrs	r3, r2
 800545c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	0148      	lsls	r0, r1, #5
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	4401      	add	r1, r0
 800547c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005480:	4313      	orrs	r3, r2
 8005482:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10d      	bne.n	80054a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6919      	ldr	r1, [r3, #16]
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	460a      	mov	r2, r1
 80054a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	791b      	ldrb	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d128      	bne.n	8005500 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d110      	bne.n	80054e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e00f      	b.n	8005500 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	1ff80000 	.word	0x1ff80000

08005530 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	f040 80ce 	bne.w	80056ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d132      	bne.n	80055c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800557c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	0cdb      	lsrs	r3, r3, #19
 80055ba:	04db      	lsls	r3, r3, #19
 80055bc:	6113      	str	r3, [r2, #16]
 80055be:	e04e      	b.n	800565e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	0cdb      	lsrs	r3, r3, #19
 80055dc:	04db      	lsls	r3, r3, #19
 80055de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005602:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	429a      	cmp	r2, r3
 800560e:	d903      	bls.n	8005618 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	0148      	lsls	r0, r1, #5
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	4401      	add	r1, r0
 8005656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800565a:	4313      	orrs	r3, r2
 800565c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d11e      	bne.n	80056a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e097      	b.n	80057d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8083 	beq.w	80057d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	6979      	ldr	r1, [r7, #20]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4313      	orrs	r3, r2
 80056ea:	634b      	str	r3, [r1, #52]	; 0x34
 80056ec:	e071      	b.n	80057d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	0cdb      	lsrs	r3, r3, #19
 800570a:	04db      	lsls	r3, r3, #19
 800570c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005730:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	6939      	ldr	r1, [r7, #16]
 8005782:	0148      	lsls	r0, r1, #5
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	4401      	add	r1, r0
 8005788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10d      	bne.n	80057b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6919      	ldr	r1, [r3, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	460a      	mov	r2, r1
 80057b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d14a      	bne.n	8005894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005816:	f040 8086 	bne.w	8005926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f242 7210 	movw	r2, #10000	; 0x2710
 800586e:	4293      	cmp	r3, r2
 8005870:	d902      	bls.n	8005878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
          break;
 8005876:	e056      	b.n	8005926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800588c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005890:	d0e7      	beq.n	8005862 <USB_EPStopXfer+0x82>
 8005892:	e048      	b.n	8005926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ac:	d13b      	bne.n	8005926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005902:	4293      	cmp	r3, r2
 8005904:	d902      	bls.n	800590c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e00c      	b.n	8005926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005924:	d0e7      	beq.n	80058f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	460b      	mov	r3, r1
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	4613      	mov	r3, r2
 8005948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d123      	bne.n	80059a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800595a:	88bb      	ldrh	r3, [r7, #4]
 800595c:	3303      	adds	r3, #3
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	e018      	b.n	800599a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	031a      	lsls	r2, r3, #12
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	461a      	mov	r2, r3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	3301      	adds	r3, #1
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3e2      	bcc.n	8005968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3724      	adds	r7, #36	; 0x24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b08b      	sub	sp, #44	; 0x2c
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	e014      	b.n	8005a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	3301      	adds	r3, #1
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	3301      	adds	r3, #1
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3301      	adds	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3e6      	bcc.n	80059dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a0e:	8bfb      	ldrh	r3, [r7, #30]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01e      	beq.n	8005a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	701a      	strb	r2, [r3, #0]
      i++;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	3301      	adds	r3, #1
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a4c:	8bfb      	ldrh	r3, [r7, #30]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ea      	bne.n	8005a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	372c      	adds	r7, #44	; 0x2c
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d12c      	bne.n	8005ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	db12      	blt.n	8005ab4 <USB_EPSetStall+0x54>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00f      	beq.n	8005ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e02b      	b.n	8005b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db12      	blt.n	8005b0e <USB_EPSetStall+0xae>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d128      	bne.n	8005baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	791b      	ldrb	r3, [r3, #4]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d003      	beq.n	8005b88 <USB_EPClearStall+0x4c>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d138      	bne.n	8005bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e027      	b.n	8005bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d003      	beq.n	8005bda <USB_EPClearStall+0x9e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d10f      	bne.n	8005bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f023 0302 	bic.w	r3, r3, #2
 8005c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	0c1b      	lsrs	r3, r3, #16
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	b29b      	uxth	r3, r3
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d94:	68bb      	ldr	r3, [r7, #8]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df0:	68bb      	ldr	r3, [r7, #8]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	333c      	adds	r3, #60	; 0x3c
 8005e76:	3304      	adds	r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <USB_EP0_OutStart+0xb8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d90a      	bls.n	8005e9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e94:	d101      	bne.n	8005e9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e037      	b.n	8005f0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec8:	f043 0318 	orr.w	r3, r3, #24
 8005ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005edc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10f      	bne.n	8005f08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	4f54300a 	.word	0x4f54300a

08005f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <USB_CoreReset+0x64>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e01b      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	daf2      	bge.n	8005f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <USB_CoreReset+0x64>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d0f0      	beq.n	8005f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	00030d40 	.word	0x00030d40

08005f84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f94:	f002 fca2 	bl	80088dc <USBD_static_malloc>
 8005f98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	; 0xb0
 8005faa:	2100      	movs	r1, #0
 8005fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e0d4      	b.n	800615e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005fb8:	2100      	movs	r1, #0
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f002 fcf6 	bl	80089ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32b0      	adds	r2, #176	; 0xb0
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32b0      	adds	r2, #176	; 0xb0
 8005fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7c1b      	ldrb	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d138      	bne.n	800605e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <USBD_CDC_Init+0x1e4>)
 8005fee:	7819      	ldrb	r1, [r3, #0]
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f002 fb4d 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ffc:	4b5a      	ldr	r3, [pc, #360]	; (8006168 <USBD_CDC_Init+0x1e4>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3324      	adds	r3, #36	; 0x24
 8006012:	2201      	movs	r2, #1
 8006014:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006016:	4b55      	ldr	r3, [pc, #340]	; (800616c <USBD_CDC_Init+0x1e8>)
 8006018:	7819      	ldrb	r1, [r3, #0]
 800601a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800601e:	2202      	movs	r2, #2
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f002 fb38 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006026:	4b51      	ldr	r3, [pc, #324]	; (800616c <USBD_CDC_Init+0x1e8>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 020f 	and.w	r2, r3, #15
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800603e:	2201      	movs	r2, #1
 8006040:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006042:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <USBD_CDC_Init+0x1ec>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3326      	adds	r3, #38	; 0x26
 8006058:	2210      	movs	r2, #16
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e035      	b.n	80060ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <USBD_CDC_Init+0x1e4>)
 8006060:	7819      	ldrb	r1, [r3, #0]
 8006062:	2340      	movs	r3, #64	; 0x40
 8006064:	2202      	movs	r2, #2
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 fb15 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800606c:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <USBD_CDC_Init+0x1e4>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3324      	adds	r3, #36	; 0x24
 8006082:	2201      	movs	r2, #1
 8006084:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006086:	4b39      	ldr	r3, [pc, #228]	; (800616c <USBD_CDC_Init+0x1e8>)
 8006088:	7819      	ldrb	r1, [r3, #0]
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	2202      	movs	r2, #2
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f002 fb01 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006094:	4b35      	ldr	r3, [pc, #212]	; (800616c <USBD_CDC_Init+0x1e8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ac:	2201      	movs	r2, #1
 80060ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060b0:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <USBD_CDC_Init+0x1ec>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3326      	adds	r3, #38	; 0x26
 80060c6:	2210      	movs	r2, #16
 80060c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060ca:	4b29      	ldr	r3, [pc, #164]	; (8006170 <USBD_CDC_Init+0x1ec>)
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	2308      	movs	r3, #8
 80060d0:	2203      	movs	r2, #3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f002 fadf 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <USBD_CDC_Init+0x1ec>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	3324      	adds	r3, #36	; 0x24
 80060ee:	2201      	movs	r2, #1
 80060f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	33b0      	adds	r3, #176	; 0xb0
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006128:	2302      	movs	r3, #2
 800612a:	e018      	b.n	800615e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7c1b      	ldrb	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <USBD_CDC_Init+0x1e8>)
 8006136:	7819      	ldrb	r1, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800613e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f002 fb96 	bl	8008874 <USBD_LL_PrepareReceive>
 8006148:	e008      	b.n	800615c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <USBD_CDC_Init+0x1e8>)
 800614c:	7819      	ldrb	r1, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f002 fb8c 	bl	8008874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200001b3 	.word	0x200001b3
 800616c:	200001b4 	.word	0x200001b4
 8006170:	200001b5 	.word	0x200001b5

08006174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006180:	4b3a      	ldr	r3, [pc, #232]	; (800626c <USBD_CDC_DeInit+0xf8>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f002 faab 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800618c:	4b37      	ldr	r3, [pc, #220]	; (800626c <USBD_CDC_DeInit+0xf8>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2200      	movs	r2, #0
 80061a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061a6:	4b32      	ldr	r3, [pc, #200]	; (8006270 <USBD_CDC_DeInit+0xfc>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 fa98 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061b2:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <USBD_CDC_DeInit+0xfc>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ca:	2200      	movs	r2, #0
 80061cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <USBD_CDC_DeInit+0x100>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f002 fa84 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061da:	4b26      	ldr	r3, [pc, #152]	; (8006274 <USBD_CDC_DeInit+0x100>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	3324      	adds	r3, #36	; 0x24
 80061f0:	2200      	movs	r2, #0
 80061f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061f4:	4b1f      	ldr	r3, [pc, #124]	; (8006274 <USBD_CDC_DeInit+0x100>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	3326      	adds	r3, #38	; 0x26
 800620a:	2200      	movs	r2, #0
 800620c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	32b0      	adds	r2, #176	; 0xb0
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01f      	beq.n	8006260 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	33b0      	adds	r3, #176	; 0xb0
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32b0      	adds	r2, #176	; 0xb0
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	4618      	mov	r0, r3
 8006244:	f002 fb58 	bl	80088f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32b0      	adds	r2, #176	; 0xb0
 8006252:	2100      	movs	r1, #0
 8006254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200001b3 	.word	0x200001b3
 8006270:	200001b4 	.word	0x200001b4
 8006274:	200001b5 	.word	0x200001b5

08006278 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	32b0      	adds	r2, #176	; 0xb0
 800628c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0bf      	b.n	8006428 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d050      	beq.n	8006356 <USBD_CDC_Setup+0xde>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	f040 80af 	bne.w	8006418 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	88db      	ldrh	r3, [r3, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d03a      	beq.n	8006338 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b25b      	sxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da1b      	bge.n	8006304 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	33b0      	adds	r3, #176	; 0xb0
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	88d2      	ldrh	r2, [r2, #6]
 80062e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	88db      	ldrh	r3, [r3, #6]
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	bf28      	it	cs
 80062f2:	2307      	movcs	r3, #7
 80062f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	89fa      	ldrh	r2, [r7, #14]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fd89 	bl	8007e14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006302:	e090      	b.n	8006426 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785a      	ldrb	r2, [r3, #1]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	2b3f      	cmp	r3, #63	; 0x3f
 8006314:	d803      	bhi.n	800631e <USBD_CDC_Setup+0xa6>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	e000      	b.n	8006320 <USBD_CDC_Setup+0xa8>
 800631e:	2240      	movs	r2, #64	; 0x40
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006326:	6939      	ldr	r1, [r7, #16]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800632e:	461a      	mov	r2, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fd9b 	bl	8007e6c <USBD_CtlPrepareRx>
      break;
 8006336:	e076      	b.n	8006426 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	33b0      	adds	r3, #176	; 0xb0
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	7850      	ldrb	r0, [r2, #1]
 800634e:	2200      	movs	r2, #0
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4798      	blx	r3
      break;
 8006354:	e067      	b.n	8006426 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b0b      	cmp	r3, #11
 800635c:	d851      	bhi.n	8006402 <USBD_CDC_Setup+0x18a>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <USBD_CDC_Setup+0xec>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006395 	.word	0x08006395
 8006368:	08006411 	.word	0x08006411
 800636c:	08006403 	.word	0x08006403
 8006370:	08006403 	.word	0x08006403
 8006374:	08006403 	.word	0x08006403
 8006378:	08006403 	.word	0x08006403
 800637c:	08006403 	.word	0x08006403
 8006380:	08006403 	.word	0x08006403
 8006384:	08006403 	.word	0x08006403
 8006388:	08006403 	.word	0x08006403
 800638c:	080063bf 	.word	0x080063bf
 8006390:	080063e9 	.word	0x080063e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b03      	cmp	r3, #3
 800639e:	d107      	bne.n	80063b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063a0:	f107 030a 	add.w	r3, r7, #10
 80063a4:	2202      	movs	r2, #2
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fd33 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063ae:	e032      	b.n	8006416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fcbd 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	75fb      	strb	r3, [r7, #23]
          break;
 80063bc:	e02b      	b.n	8006416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d107      	bne.n	80063da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063ca:	f107 030d 	add.w	r3, r7, #13
 80063ce:	2201      	movs	r2, #1
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fd1e 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063d8:	e01d      	b.n	8006416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fca8 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80063e2:	2303      	movs	r3, #3
 80063e4:	75fb      	strb	r3, [r7, #23]
          break;
 80063e6:	e016      	b.n	8006416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d00f      	beq.n	8006414 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fc9b 	bl	8007d32 <USBD_CtlError>
            ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006400:	e008      	b.n	8006414 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fc94 	bl	8007d32 <USBD_CtlError>
          ret = USBD_FAIL;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
          break;
 800640e:	e002      	b.n	8006416 <USBD_CDC_Setup+0x19e>
          break;
 8006410:	bf00      	nop
 8006412:	e008      	b.n	8006426 <USBD_CDC_Setup+0x1ae>
          break;
 8006414:	bf00      	nop
      }
      break;
 8006416:	e006      	b.n	8006426 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 fc89 	bl	8007d32 <USBD_CtlError>
      ret = USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	bf00      	nop
  }

  return (uint8_t)ret;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	32b0      	adds	r2, #176	; 0xb0
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e065      	b.n	8006526 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	32b0      	adds	r2, #176	; 0xb0
 8006464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006468:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3318      	adds	r3, #24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d02f      	beq.n	80064e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	3318      	adds	r3, #24
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 010f 	and.w	r1, r3, #15
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	460b      	mov	r3, r1
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	440b      	add	r3, r1
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4403      	add	r3, r0
 80064ac:	3348      	adds	r3, #72	; 0x48
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d112      	bne.n	80064e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3318      	adds	r3, #24
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064d6:	78f9      	ldrb	r1, [r7, #3]
 80064d8:	2300      	movs	r3, #0
 80064da:	2200      	movs	r2, #0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 f9a8 	bl	8008832 <USBD_LL_Transmit>
 80064e2:	e01f      	b.n	8006524 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	33b0      	adds	r3, #176	; 0xb0
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d010      	beq.n	8006524 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	33b0      	adds	r3, #176	; 0xb0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	32b0      	adds	r2, #176	; 0xb0
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	32b0      	adds	r2, #176	; 0xb0
 8006554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	e01a      	b.n	8006596 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f9a6 	bl	80088b6 <USBD_LL_GetRxDataSize>
 800656a:	4602      	mov	r2, r0
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	33b0      	adds	r3, #176	; 0xb0
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006590:	4611      	mov	r1, r2
 8006592:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	32b0      	adds	r2, #176	; 0xb0
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	e025      	b.n	800660c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	33b0      	adds	r3, #176	; 0xb0
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01a      	beq.n	800660a <USBD_CDC_EP0_RxReady+0x6c>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065da:	2bff      	cmp	r3, #255	; 0xff
 80065dc:	d015      	beq.n	800660a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	33b0      	adds	r3, #176	; 0xb0
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80065f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065fe:	b292      	uxth	r2, r2
 8006600:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800661c:	2182      	movs	r1, #130	; 0x82
 800661e:	4818      	ldr	r0, [pc, #96]	; (8006680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006620:	f000 fd4f 	bl	80070c2 <USBD_GetEpDesc>
 8006624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006626:	2101      	movs	r1, #1
 8006628:	4815      	ldr	r0, [pc, #84]	; (8006680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800662a:	f000 fd4a 	bl	80070c2 <USBD_GetEpDesc>
 800662e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006630:	2181      	movs	r1, #129	; 0x81
 8006632:	4813      	ldr	r0, [pc, #76]	; (8006680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006634:	f000 fd45 	bl	80070c2 <USBD_GetEpDesc>
 8006638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2210      	movs	r2, #16
 8006644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2200      	movs	r2, #0
 8006650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006654:	711a      	strb	r2, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d006      	beq.n	800666e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006668:	711a      	strb	r2, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2243      	movs	r2, #67	; 0x43
 8006672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000170 	.word	0x20000170

08006684 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800668c:	2182      	movs	r1, #130	; 0x82
 800668e:	4818      	ldr	r0, [pc, #96]	; (80066f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006690:	f000 fd17 	bl	80070c2 <USBD_GetEpDesc>
 8006694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006696:	2101      	movs	r1, #1
 8006698:	4815      	ldr	r0, [pc, #84]	; (80066f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800669a:	f000 fd12 	bl	80070c2 <USBD_GetEpDesc>
 800669e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066a0:	2181      	movs	r1, #129	; 0x81
 80066a2:	4813      	ldr	r0, [pc, #76]	; (80066f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066a4:	f000 fd0d 	bl	80070c2 <USBD_GetEpDesc>
 80066a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2210      	movs	r2, #16
 80066b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d006      	beq.n	80066ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2200      	movs	r2, #0
 80066c0:	711a      	strb	r2, [r3, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f042 0202 	orr.w	r2, r2, #2
 80066c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d006      	beq.n	80066de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	711a      	strb	r2, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f042 0202 	orr.w	r2, r2, #2
 80066dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2243      	movs	r2, #67	; 0x43
 80066e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000170 	.word	0x20000170

080066f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066fc:	2182      	movs	r1, #130	; 0x82
 80066fe:	4818      	ldr	r0, [pc, #96]	; (8006760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006700:	f000 fcdf 	bl	80070c2 <USBD_GetEpDesc>
 8006704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006706:	2101      	movs	r1, #1
 8006708:	4815      	ldr	r0, [pc, #84]	; (8006760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800670a:	f000 fcda 	bl	80070c2 <USBD_GetEpDesc>
 800670e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006710:	2181      	movs	r1, #129	; 0x81
 8006712:	4813      	ldr	r0, [pc, #76]	; (8006760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006714:	f000 fcd5 	bl	80070c2 <USBD_GetEpDesc>
 8006718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2210      	movs	r2, #16
 8006724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2200      	movs	r2, #0
 8006730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006734:	711a      	strb	r2, [r3, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d006      	beq.n	800674e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006748:	711a      	strb	r2, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2243      	movs	r2, #67	; 0x43
 8006752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000170 	.word	0x20000170

08006764 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	220a      	movs	r2, #10
 8006770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	2000012c 	.word	0x2000012c

08006784 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	e009      	b.n	80067ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	33b0      	adds	r3, #176	; 0xb0
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	32b0      	adds	r2, #176	; 0xb0
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067da:	2303      	movs	r3, #3
 80067dc:	e008      	b.n	80067f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32b0      	adds	r2, #176	; 0xb0
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	e004      	b.n	800682a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32b0      	adds	r2, #176	; 0xb0
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32b0      	adds	r2, #176	; 0xb0
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	e025      	b.n	80068b6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11f      	bne.n	80068b4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2201      	movs	r2, #1
 8006878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <USBD_CDC_TransmitPacket+0x88>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	f003 020f 	and.w	r2, r3, #15
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4403      	add	r3, r0
 8006896:	3318      	adds	r3, #24
 8006898:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <USBD_CDC_TransmitPacket+0x88>)
 800689c:	7819      	ldrb	r1, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 ffc1 	bl	8008832 <USBD_LL_Transmit>

    ret = USBD_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200001b3 	.word	0x200001b3

080068c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32b0      	adds	r2, #176	; 0xb0
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32b0      	adds	r2, #176	; 0xb0
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e018      	b.n	8006924 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c1b      	ldrb	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068fa:	4b0c      	ldr	r3, [pc, #48]	; (800692c <USBD_CDC_ReceivePacket+0x68>)
 80068fc:	7819      	ldrb	r1, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 ffb3 	bl	8008874 <USBD_LL_PrepareReceive>
 800690e:	e008      	b.n	8006922 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <USBD_CDC_ReceivePacket+0x68>)
 8006912:	7819      	ldrb	r1, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 ffa9 	bl	8008874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200001b4 	.word	0x200001b4

08006930 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	e01f      	b.n	8006988 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	79fa      	ldrb	r2, [r7, #7]
 800697a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f001 fe23 	bl	80085c8 <USBD_LL_Init>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e025      	b.n	80069f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32ae      	adds	r2, #174	; 0xae
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00f      	beq.n	80069e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	32ae      	adds	r2, #174	; 0xae
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f107 020e 	add.w	r2, r7, #14
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fe2b 	bl	8008660 <USBD_LL_Start>
 8006a0a:	4603      	mov	r3, r0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f908 	bl	8007cbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d01a      	beq.n	8006b08 <USBD_LL_SetupStage+0x72>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d822      	bhi.n	8006b1c <USBD_LL_SetupStage+0x86>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USBD_LL_SetupStage+0x4a>
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d00a      	beq.n	8006af4 <USBD_LL_SetupStage+0x5e>
 8006ade:	e01d      	b.n	8006b1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb5f 	bl	80071ac <USBD_StdDevReq>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
      break;
 8006af2:	e020      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbc7 	bl	8007290 <USBD_StdItfReq>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
      break;
 8006b06:	e016      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fc29 	bl	8007368 <USBD_StdEPReq>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1a:	e00c      	b.n	8006b36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fdf8 	bl	8008720 <USBD_LL_StallEP>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
      break;
 8006b34:	bf00      	nop
  }

  return ret;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d16e      	bne.n	8006c36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	f040 8098 	bne.w	8006c9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d913      	bls.n	8006ba0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bf28      	it	cs
 8006b92:	4613      	movcs	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 f984 	bl	8007ea6 <USBD_CtlContinueRx>
 8006b9e:	e07d      	b.n	8006c9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d014      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x98>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d81d      	bhi.n	8006bee <USBD_LL_DataOutStage+0xae>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USBD_LL_DataOutStage+0x7c>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d003      	beq.n	8006bc2 <USBD_LL_DataOutStage+0x82>
 8006bba:	e018      	b.n	8006bee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75bb      	strb	r3, [r7, #22]
            break;
 8006bc0:	e018      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa5e 	bl	800708e <USBD_CoreFindIF>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd6:	e00d      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fa60 	bl	80070a8 <USBD_CoreFindEP>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75bb      	strb	r3, [r7, #22]
            break;
 8006bec:	e002      	b.n	8006bf4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d119      	bne.n	8006c2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d113      	bne.n	8006c2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c06:	7dba      	ldrb	r2, [r7, #22]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	32ae      	adds	r2, #174	; 0xae
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c16:	7dba      	ldrb	r2, [r7, #22]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c1e:	7dba      	ldrb	r2, [r7, #22]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	32ae      	adds	r2, #174	; 0xae
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 f94a 	bl	8007ec8 <USBD_CtlSendStatus>
 8006c34:	e032      	b.n	8006c9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa31 	bl	80070a8 <USBD_CoreFindEP>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c4a:	7dbb      	ldrb	r3, [r7, #22]
 8006c4c:	2bff      	cmp	r3, #255	; 0xff
 8006c4e:	d025      	beq.n	8006c9c <USBD_LL_DataOutStage+0x15c>
 8006c50:	7dbb      	ldrb	r3, [r7, #22]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d122      	bne.n	8006c9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d117      	bne.n	8006c92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c62:	7dba      	ldrb	r2, [r7, #22]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	32ae      	adds	r2, #174	; 0xae
 8006c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00f      	beq.n	8006c92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c72:	7dba      	ldrb	r2, [r7, #22]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c7a:	7dba      	ldrb	r2, [r7, #22]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	32ae      	adds	r2, #174	; 0xae
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	7afa      	ldrb	r2, [r7, #11]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	e000      	b.n	8006c9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d16f      	bne.n	8006d9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d15a      	bne.n	8006d80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d914      	bls.n	8006d00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 f8ac 	bl	8007e4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 fdbb 	bl	8008874 <USBD_LL_PrepareReceive>
 8006cfe:	e03f      	b.n	8006d80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d11c      	bne.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d316      	bcc.n	8006d46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20f      	bcs.n	8006d46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 f88d 	bl	8007e4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 fd98 	bl	8008874 <USBD_LL_PrepareReceive>
 8006d44:	e01c      	b.n	8006d80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d10f      	bne.n	8006d72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 fcd3 	bl	8008720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 f8b7 	bl	8007eee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d03a      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe42 	bl	8006a14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d98:	e032      	b.n	8006e00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f97f 	bl	80070a8 <USBD_CoreFindEP>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2bff      	cmp	r3, #255	; 0xff
 8006db2:	d025      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d122      	bne.n	8006e00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d11c      	bne.n	8006e00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dc6:	7dfa      	ldrb	r2, [r7, #23]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	32ae      	adds	r2, #174	; 0xae
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d014      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006dd6:	7dfa      	ldrb	r2, [r7, #23]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dde:	7dfa      	ldrb	r2, [r7, #23]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	7afa      	ldrb	r2, [r7, #11]
 8006dec:	4611      	mov	r1, r2
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006df6:	7dbb      	ldrb	r3, [r7, #22]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dfc:	7dbb      	ldrb	r3, [r7, #22]
 8006dfe:	e000      	b.n	8006e02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6852      	ldr	r2, [r2, #4]
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	4611      	mov	r1, r2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	2200      	movs	r2, #0
 8006e74:	2100      	movs	r1, #0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fc0d 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2240      	movs	r2, #64	; 0x40
 8006e88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fbff 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	621a      	str	r2, [r3, #32]

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d106      	bne.n	8006f1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d110      	bne.n	8006f60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	32ae      	adds	r2, #174	; 0xae
 8006f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e01c      	b.n	8006fc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d115      	bne.n	8006fc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32ae      	adds	r2, #174	; 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	; 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e01c      	b.n	800702a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d115      	bne.n	8007028 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	32ae      	adds	r2, #174	; 0xae
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32ae      	adds	r2, #174	; 0xae
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6852      	ldr	r2, [r2, #4]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	4611      	mov	r1, r2
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800709a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d920      	bls.n	800712c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070f2:	e013      	b.n	800711c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070f4:	f107 030a 	add.w	r3, r7, #10
 80070f8:	4619      	mov	r1, r3
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f000 f81b 	bl	8007136 <USBD_GetNextDesc>
 8007100:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b05      	cmp	r3, #5
 8007108:	d108      	bne.n	800711c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	429a      	cmp	r2, r3
 8007116:	d008      	beq.n	800712a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	885b      	ldrh	r3, [r3, #2]
 8007120:	b29a      	uxth	r2, r3
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	429a      	cmp	r2, r3
 8007126:	d8e5      	bhi.n	80070f4 <USBD_GetEpDesc+0x32>
 8007128:	e000      	b.n	800712c <USBD_GetEpDesc+0x6a>
          break;
 800712a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800712c:	693b      	ldr	r3, [r7, #16]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	881a      	ldrh	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	4413      	add	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4413      	add	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3301      	adds	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800718e:	8a3b      	ldrh	r3, [r7, #16]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	b21a      	sxth	r2, r3
 8007194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007198:	4313      	orrs	r3, r2
 800719a:	b21b      	sxth	r3, r3
 800719c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800719e:	89fb      	ldrh	r3, [r7, #14]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d005      	beq.n	80071d2 <USBD_StdDevReq+0x26>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d857      	bhi.n	800727a <USBD_StdDevReq+0xce>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <USBD_StdDevReq+0x42>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d153      	bne.n	800727a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	32ae      	adds	r2, #174	; 0xae
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
      break;
 80071ec:	e04a      	b.n	8007284 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d83b      	bhi.n	800726e <USBD_StdDevReq+0xc2>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_StdDevReq+0x50>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007251 	.word	0x08007251
 8007200:	08007265 	.word	0x08007265
 8007204:	0800726f 	.word	0x0800726f
 8007208:	0800725b 	.word	0x0800725b
 800720c:	0800726f 	.word	0x0800726f
 8007210:	0800722f 	.word	0x0800722f
 8007214:	08007225 	.word	0x08007225
 8007218:	0800726f 	.word	0x0800726f
 800721c:	08007247 	.word	0x08007247
 8007220:	08007239 	.word	0x08007239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa3c 	bl	80076a4 <USBD_GetDescriptor>
          break;
 800722c:	e024      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fba1 	bl	8007978 <USBD_SetAddress>
          break;
 8007236:	e01f      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fbe0 	bl	8007a00 <USBD_SetConfig>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
          break;
 8007244:	e018      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc83 	bl	8007b54 <USBD_GetConfig>
          break;
 800724e:	e013      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcb4 	bl	8007bc0 <USBD_GetStatus>
          break;
 8007258:	e00e      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fce3 	bl	8007c28 <USBD_SetFeature>
          break;
 8007262:	e009      	b.n	8007278 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fd07 	bl	8007c7a <USBD_ClrFeature>
          break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd5e 	bl	8007d32 <USBD_CtlError>
          break;
 8007276:	bf00      	nop
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fd58 	bl	8007d32 <USBD_CtlError>
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d005      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d852      	bhi.n	8007354 <USBD_StdItfReq+0xc4>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d14e      	bne.n	8007354 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d840      	bhi.n	8007346 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	889b      	ldrh	r3, [r3, #4]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d836      	bhi.n	800733c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	889b      	ldrh	r3, [r3, #4]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fed9 	bl	800708e <USBD_CoreFindIF>
 80072dc:	4603      	mov	r3, r0
 80072de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2bff      	cmp	r3, #255	; 0xff
 80072e4:	d01d      	beq.n	8007322 <USBD_StdItfReq+0x92>
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11a      	bne.n	8007322 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072ec:	7bba      	ldrb	r2, [r7, #14]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	; 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00f      	beq.n	800731c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072fc:	7bba      	ldrb	r2, [r7, #14]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007304:	7bba      	ldrb	r2, [r7, #14]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32ae      	adds	r2, #174	; 0xae
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800731a:	e004      	b.n	8007326 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007320:	e001      	b.n	8007326 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	88db      	ldrh	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <USBD_StdItfReq+0xc0>
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10d      	bne.n	8007350 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fdc7 	bl	8007ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800733a:	e009      	b.n	8007350 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fcf7 	bl	8007d32 <USBD_CtlError>
          break;
 8007344:	e004      	b.n	8007350 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fcf2 	bl	8007d32 <USBD_CtlError>
          break;
 800734e:	e000      	b.n	8007352 <USBD_StdItfReq+0xc2>
          break;
 8007350:	bf00      	nop
      }
      break;
 8007352:	e004      	b.n	800735e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fceb 	bl	8007d32 <USBD_CtlError>
      break;
 800735c:	bf00      	nop
  }

  return ret;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	889b      	ldrh	r3, [r3, #4]
 800737a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d007      	beq.n	8007398 <USBD_StdEPReq+0x30>
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	f200 817f 	bhi.w	800768c <USBD_StdEPReq+0x324>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02a      	beq.n	80073e8 <USBD_StdEPReq+0x80>
 8007392:	2b20      	cmp	r3, #32
 8007394:	f040 817a 	bne.w	800768c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fe83 	bl	80070a8 <USBD_CoreFindEP>
 80073a2:	4603      	mov	r3, r0
 80073a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073a6:	7b7b      	ldrb	r3, [r7, #13]
 80073a8:	2bff      	cmp	r3, #255	; 0xff
 80073aa:	f000 8174 	beq.w	8007696 <USBD_StdEPReq+0x32e>
 80073ae:	7b7b      	ldrb	r3, [r7, #13]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 8170 	bne.w	8007696 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073b6:	7b7a      	ldrb	r2, [r7, #13]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073be:	7b7a      	ldrb	r2, [r7, #13]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32ae      	adds	r2, #174	; 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8163 	beq.w	8007696 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073d0:	7b7a      	ldrb	r2, [r7, #13]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	32ae      	adds	r2, #174	; 0xae
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073e6:	e156      	b.n	8007696 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d008      	beq.n	8007402 <USBD_StdEPReq+0x9a>
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	f300 8145 	bgt.w	8007680 <USBD_StdEPReq+0x318>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 809b 	beq.w	8007532 <USBD_StdEPReq+0x1ca>
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d03c      	beq.n	800747a <USBD_StdEPReq+0x112>
 8007400:	e13e      	b.n	8007680 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d002      	beq.n	8007414 <USBD_StdEPReq+0xac>
 800740e:	2b03      	cmp	r3, #3
 8007410:	d016      	beq.n	8007440 <USBD_StdEPReq+0xd8>
 8007412:	e02c      	b.n	800746e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00d      	beq.n	8007436 <USBD_StdEPReq+0xce>
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b80      	cmp	r3, #128	; 0x80
 800741e:	d00a      	beq.n	8007436 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f97b 	bl	8008720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 f977 	bl	8008720 <USBD_LL_StallEP>
 8007432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007434:	e020      	b.n	8007478 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc7a 	bl	8007d32 <USBD_CtlError>
              break;
 800743e:	e01b      	b.n	8007478 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	885b      	ldrh	r3, [r3, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10e      	bne.n	8007466 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <USBD_StdEPReq+0xfe>
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b80      	cmp	r3, #128	; 0x80
 8007452:	d008      	beq.n	8007466 <USBD_StdEPReq+0xfe>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f95d 	bl	8008720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fd2e 	bl	8007ec8 <USBD_CtlSendStatus>

              break;
 800746c:	e004      	b.n	8007478 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc5e 	bl	8007d32 <USBD_CtlError>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e107      	b.n	800768a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d002      	beq.n	800748c <USBD_StdEPReq+0x124>
 8007486:	2b03      	cmp	r3, #3
 8007488:	d016      	beq.n	80074b8 <USBD_StdEPReq+0x150>
 800748a:	e04b      	b.n	8007524 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00d      	beq.n	80074ae <USBD_StdEPReq+0x146>
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d00a      	beq.n	80074ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f93f 	bl	8008720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f93b 	bl	8008720 <USBD_LL_StallEP>
 80074aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074ac:	e040      	b.n	8007530 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc3e 	bl	8007d32 <USBD_CtlError>
              break;
 80074b6:	e03b      	b.n	8007530 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	885b      	ldrh	r3, [r3, #2]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d136      	bne.n	800752e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 f945 	bl	800875e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fcf7 	bl	8007ec8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fde2 	bl	80070a8 <USBD_CoreFindEP>
 80074e4:	4603      	mov	r3, r0
 80074e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e8:	7b7b      	ldrb	r3, [r7, #13]
 80074ea:	2bff      	cmp	r3, #255	; 0xff
 80074ec:	d01f      	beq.n	800752e <USBD_StdEPReq+0x1c6>
 80074ee:	7b7b      	ldrb	r3, [r7, #13]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11c      	bne.n	800752e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074f4:	7b7a      	ldrb	r2, [r7, #13]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074fc:	7b7a      	ldrb	r2, [r7, #13]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	; 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800750c:	7b7a      	ldrb	r2, [r7, #13]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	32ae      	adds	r2, #174	; 0xae
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc03 	bl	8007d32 <USBD_CtlError>
              break;
 800752c:	e000      	b.n	8007530 <USBD_StdEPReq+0x1c8>
              break;
 800752e:	bf00      	nop
          }
          break;
 8007530:	e0ab      	b.n	800768a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d002      	beq.n	8007544 <USBD_StdEPReq+0x1dc>
 800753e:	2b03      	cmp	r3, #3
 8007540:	d032      	beq.n	80075a8 <USBD_StdEPReq+0x240>
 8007542:	e097      	b.n	8007674 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <USBD_StdEPReq+0x1f2>
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b80      	cmp	r3, #128	; 0x80
 800754e:	d004      	beq.n	800755a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fbed 	bl	8007d32 <USBD_CtlError>
                break;
 8007558:	e091      	b.n	800767e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da0b      	bge.n	800757a <USBD_StdEPReq+0x212>
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	3310      	adds	r3, #16
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	e00b      	b.n	8007592 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	3304      	adds	r3, #4
 8007592:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2202      	movs	r2, #2
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc37 	bl	8007e14 <USBD_CtlSendData>
              break;
 80075a6:	e06a      	b.n	800767e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da11      	bge.n	80075d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 020f 	and.w	r2, r3, #15
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	3324      	adds	r3, #36	; 0x24
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d117      	bne.n	80075fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbb0 	bl	8007d32 <USBD_CtlError>
                  break;
 80075d2:	e054      	b.n	800767e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb9d 	bl	8007d32 <USBD_CtlError>
                  break;
 80075f8:	e041      	b.n	800767e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da0b      	bge.n	800761a <USBD_StdEPReq+0x2b2>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	3310      	adds	r3, #16
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	e00b      	b.n	8007632 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <USBD_StdEPReq+0x2d8>
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d103      	bne.n	8007648 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	e00e      	b.n	8007666 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f8a5 	bl	800879c <USBD_LL_IsStallEP>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e002      	b.n	8007666 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2202      	movs	r2, #2
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fbd1 	bl	8007e14 <USBD_CtlSendData>
              break;
 8007672:	e004      	b.n	800767e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fb5b 	bl	8007d32 <USBD_CtlError>
              break;
 800767c:	bf00      	nop
          }
          break;
 800767e:	e004      	b.n	800768a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb55 	bl	8007d32 <USBD_CtlError>
          break;
 8007688:	bf00      	nop
      }
      break;
 800768a:	e005      	b.n	8007698 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb4f 	bl	8007d32 <USBD_CtlError>
      break;
 8007694:	e000      	b.n	8007698 <USBD_StdEPReq+0x330>
      break;
 8007696:	bf00      	nop
  }

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	f200 8128 	bhi.w	800791a <USBD_GetDescriptor+0x276>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <USBD_GetDescriptor+0x2c>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	08007705 	.word	0x08007705
 80076d8:	08007745 	.word	0x08007745
 80076dc:	0800791b 	.word	0x0800791b
 80076e0:	0800791b 	.word	0x0800791b
 80076e4:	080078bb 	.word	0x080078bb
 80076e8:	080078e7 	.word	0x080078e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
      break;
 8007702:	e112      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c1b      	ldrb	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f107 0208 	add.w	r2, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	2202      	movs	r2, #2
 8007724:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007726:	e100      	b.n	800792a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	f107 0208 	add.w	r2, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	2202      	movs	r2, #2
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e0f2      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	885b      	ldrh	r3, [r3, #2]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b05      	cmp	r3, #5
 800774c:	f200 80ac 	bhi.w	80078a8 <USBD_GetDescriptor+0x204>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <USBD_GetDescriptor+0xb4>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007771 	.word	0x08007771
 800775c:	080077a5 	.word	0x080077a5
 8007760:	080077d9 	.word	0x080077d9
 8007764:	0800780d 	.word	0x0800780d
 8007768:	08007841 	.word	0x08007841
 800776c:	08007875 	.word	0x08007875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e091      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 facb 	bl	8007d32 <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e089      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e077      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fab1 	bl	8007d32 <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e06f      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e05d      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa97 	bl	8007d32 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e055      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e043      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa7d 	bl	8007d32 <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e03b      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e029      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa63 	bl	8007d32 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e021      	b.n	80078b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e00f      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa49 	bl	8007d32 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e007      	b.n	80078b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa41 	bl	8007d32 <USBD_CtlError>
          err++;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	3301      	adds	r3, #1
 80078b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078b6:	bf00      	nop
      }
      break;
 80078b8:	e037      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f107 0208 	add.w	r2, r7, #8
 80078ce:	4610      	mov	r0, r2
 80078d0:	4798      	blx	r3
 80078d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d4:	e029      	b.n	800792a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa2a 	bl	8007d32 <USBD_CtlError>
        err++;
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	3301      	adds	r3, #1
 80078e2:	72fb      	strb	r3, [r7, #11]
      break;
 80078e4:	e021      	b.n	800792a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7c1b      	ldrb	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f107 0208 	add.w	r2, r7, #8
 80078fa:	4610      	mov	r0, r2
 80078fc:	4798      	blx	r3
 80078fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3301      	adds	r3, #1
 8007904:	2207      	movs	r2, #7
 8007906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007908:	e00f      	b.n	800792a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa10 	bl	8007d32 <USBD_CtlError>
        err++;
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	3301      	adds	r3, #1
 8007916:	72fb      	strb	r3, [r7, #11]
      break;
 8007918:	e007      	b.n	800792a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa08 	bl	8007d32 <USBD_CtlError>
      err++;
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	3301      	adds	r3, #1
 8007926:	72fb      	strb	r3, [r7, #11]
      break;
 8007928:	bf00      	nop
  }

  if (err != 0U)
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11e      	bne.n	800796e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d016      	beq.n	8007966 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88da      	ldrh	r2, [r3, #6]
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	4293      	cmp	r3, r2
 8007946:	bf28      	it	cs
 8007948:	4613      	movcs	r3, r2
 800794a:	b29b      	uxth	r3, r3
 800794c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	461a      	mov	r2, r3
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa5d 	bl	8007e14 <USBD_CtlSendData>
 800795a:	e009      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9e7 	bl	8007d32 <USBD_CtlError>
 8007964:	e004      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 faae 	bl	8007ec8 <USBD_CtlSendStatus>
 800796c:	e000      	b.n	8007970 <USBD_GetDescriptor+0x2cc>
    return;
 800796e:	bf00      	nop
  }
}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d131      	bne.n	80079ee <USBD_SetAddress+0x76>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12d      	bne.n	80079ee <USBD_SetAddress+0x76>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	2b7f      	cmp	r3, #127	; 0x7f
 8007998:	d829      	bhi.n	80079ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d104      	bne.n	80079bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9bc 	bl	8007d32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ba:	e01d      	b.n	80079f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 ff13 	bl	80087f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa7a 	bl	8007ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e2:	e009      	b.n	80079f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	e004      	b.n	80079f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f99e 	bl	8007d32 <USBD_CtlError>
  }
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a18:	4b4d      	ldr	r3, [pc, #308]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d905      	bls.n	8007a2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f985 	bl	8007d32 <USBD_CtlError>
    return USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e08c      	b.n	8007b46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d002      	beq.n	8007a3e <USBD_SetConfig+0x3e>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d029      	beq.n	8007a90 <USBD_SetConfig+0x90>
 8007a3c:	e075      	b.n	8007b2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a3e:	4b44      	ldr	r3, [pc, #272]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d020      	beq.n	8007a88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a46:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a50:	4b3f      	ldr	r3, [pc, #252]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fe ffe7 	bl	8006a2a <USBD_SetClassConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f962 	bl	8007d32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a76:	e065      	b.n	8007b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa25 	bl	8007ec8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a86:	e05d      	b.n	8007b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa1d 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007a8e:	e059      	b.n	8007b44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a90:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <USBD_SetConfig+0x150>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d112      	bne.n	8007abe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aa0:	4b2b      	ldr	r3, [pc, #172]	; (8007b50 <USBD_SetConfig+0x150>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aaa:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <USBD_SetConfig+0x150>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe ffd6 	bl	8006a62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa06 	bl	8007ec8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007abc:	e042      	b.n	8007b44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <USBD_SetConfig+0x150>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d02a      	beq.n	8007b22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe ffc4 	bl	8006a62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ada:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <USBD_SetConfig+0x150>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <USBD_SetConfig+0x150>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe ff9d 	bl	8006a2a <USBD_SetClassConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f918 	bl	8007d32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe ffa9 	bl	8006a62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b18:	e014      	b.n	8007b44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9d4 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007b20:	e010      	b.n	8007b44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9d0 	bl	8007ec8 <USBD_CtlSendStatus>
      break;
 8007b28:	e00c      	b.n	8007b44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f900 	bl	8007d32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <USBD_SetConfig+0x150>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fe ff92 	bl	8006a62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000384 	.word	0x20000384

08007b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d004      	beq.n	8007b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8e2 	bl	8007d32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b6e:	e023      	b.n	8007bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	dc02      	bgt.n	8007b82 <USBD_GetConfig+0x2e>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc03      	bgt.n	8007b88 <USBD_GetConfig+0x34>
 8007b80:	e015      	b.n	8007bae <USBD_GetConfig+0x5a>
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d00b      	beq.n	8007b9e <USBD_GetConfig+0x4a>
 8007b86:	e012      	b.n	8007bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3308      	adds	r3, #8
 8007b92:	2201      	movs	r2, #1
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f93c 	bl	8007e14 <USBD_CtlSendData>
        break;
 8007b9c:	e00c      	b.n	8007bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f934 	bl	8007e14 <USBD_CtlSendData>
        break;
 8007bac:	e004      	b.n	8007bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f8be 	bl	8007d32 <USBD_CtlError>
        break;
 8007bb6:	bf00      	nop
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d81e      	bhi.n	8007c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d004      	beq.n	8007bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f8a5 	bl	8007d32 <USBD_CtlError>
        break;
 8007be8:	e01a      	b.n	8007c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f900 	bl	8007e14 <USBD_CtlSendData>
      break;
 8007c14:	e004      	b.n	8007c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f88a 	bl	8007d32 <USBD_CtlError>
      break;
 8007c1e:	bf00      	nop
  }
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d107      	bne.n	8007c4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f940 	bl	8007ec8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c48:	e013      	b.n	8007c72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d10b      	bne.n	8007c6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	889b      	ldrh	r3, [r3, #4]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f930 	bl	8007ec8 <USBD_CtlSendStatus>
}
 8007c68:	e003      	b.n	8007c72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f860 	bl	8007d32 <USBD_CtlError>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d80b      	bhi.n	8007caa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10c      	bne.n	8007cb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f910 	bl	8007ec8 <USBD_CtlSendStatus>
      }
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f840 	bl	8007d32 <USBD_CtlError>
      break;
 8007cb2:	e000      	b.n	8007cb6 <USBD_ClrFeature+0x3c>
      break;
 8007cb4:	bf00      	nop
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	781a      	ldrb	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fa41 	bl	8007170 <SWAPBYTE>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fa34 	bl	8007170 <SWAPBYTE>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fa27 	bl	8007170 <SWAPBYTE>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	80da      	strh	r2, [r3, #6]
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fcee 	bl	8008720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fcea 	bl	8008720 <USBD_LL_StallEP>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d036      	beq.n	8007dd8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d6e:	6938      	ldr	r0, [r7, #16]
 8007d70:	f000 f836 	bl	8007de0 <USBD_GetLen>
 8007d74:	4603      	mov	r3, r0
 8007d76:	3301      	adds	r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4413      	add	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	3301      	adds	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	3301      	adds	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007da4:	e013      	b.n	8007dce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4413      	add	r3, r2
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3301      	adds	r3, #1
 8007db6:	613b      	str	r3, [r7, #16]
    idx++;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e7      	bne.n	8007da6 <USBD_GetString+0x52>
 8007dd6:	e000      	b.n	8007dda <USBD_GetString+0x86>
    return;
 8007dd8:	bf00      	nop
  }
}
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007df0:	e005      	b.n	8007dfe <USBD_GetLen+0x1e>
  {
    len++;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3301      	adds	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f5      	bne.n	8007df2 <USBD_GetLen+0x12>
  }

  return len;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fcf9 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fce8 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	2100      	movs	r1, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fcec 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fcdb 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fca7 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007efe:	2300      	movs	r3, #0
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fcb5 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4912      	ldr	r1, [pc, #72]	; (8007f64 <MX_USB_DEVICE_Init+0x50>)
 8007f1c:	4812      	ldr	r0, [pc, #72]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f1e:	f7fe fd07 	bl	8006930 <USBD_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f28:	f7f8 fdf0 	bl	8000b0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f2c:	490f      	ldr	r1, [pc, #60]	; (8007f6c <MX_USB_DEVICE_Init+0x58>)
 8007f2e:	480e      	ldr	r0, [pc, #56]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f30:	f7fe fd2e 	bl	8006990 <USBD_RegisterClass>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f3a:	f7f8 fde7 	bl	8000b0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f3e:	490c      	ldr	r1, [pc, #48]	; (8007f70 <MX_USB_DEVICE_Init+0x5c>)
 8007f40:	4809      	ldr	r0, [pc, #36]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f42:	f7fe fc1f 	bl	8006784 <USBD_CDC_RegisterInterface>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f4c:	f7f8 fdde 	bl	8000b0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f52:	f7fe fd53 	bl	80069fc <USBD_Start>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f5c:	f7f8 fdd6 	bl	8000b0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f60:	bf00      	nop
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200001cc 	.word	0x200001cc
 8007f68:	20000388 	.word	0x20000388
 8007f6c:	20000138 	.word	0x20000138
 8007f70:	200001b8 	.word	0x200001b8

08007f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4905      	ldr	r1, [pc, #20]	; (8007f90 <CDC_Init_FS+0x1c>)
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f7e:	f7fe fc1b 	bl	80067b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f82:	4905      	ldr	r1, [pc, #20]	; (8007f98 <CDC_Init_FS+0x24>)
 8007f84:	4803      	ldr	r0, [pc, #12]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f86:	f7fe fc39 	bl	80067fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000e64 	.word	0x20000e64
 8007f94:	20000388 	.word	0x20000388
 8007f98:	20000664 	.word	0x20000664

08007f9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b23      	cmp	r3, #35	; 0x23
 8007fc0:	d84a      	bhi.n	8008058 <CDC_Control_FS+0xac>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <CDC_Control_FS+0x1c>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08008059 	.word	0x08008059
 8007fcc:	08008059 	.word	0x08008059
 8007fd0:	08008059 	.word	0x08008059
 8007fd4:	08008059 	.word	0x08008059
 8007fd8:	08008059 	.word	0x08008059
 8007fdc:	08008059 	.word	0x08008059
 8007fe0:	08008059 	.word	0x08008059
 8007fe4:	08008059 	.word	0x08008059
 8007fe8:	08008059 	.word	0x08008059
 8007fec:	08008059 	.word	0x08008059
 8007ff0:	08008059 	.word	0x08008059
 8007ff4:	08008059 	.word	0x08008059
 8007ff8:	08008059 	.word	0x08008059
 8007ffc:	08008059 	.word	0x08008059
 8008000:	08008059 	.word	0x08008059
 8008004:	08008059 	.word	0x08008059
 8008008:	08008059 	.word	0x08008059
 800800c:	08008059 	.word	0x08008059
 8008010:	08008059 	.word	0x08008059
 8008014:	08008059 	.word	0x08008059
 8008018:	08008059 	.word	0x08008059
 800801c:	08008059 	.word	0x08008059
 8008020:	08008059 	.word	0x08008059
 8008024:	08008059 	.word	0x08008059
 8008028:	08008059 	.word	0x08008059
 800802c:	08008059 	.word	0x08008059
 8008030:	08008059 	.word	0x08008059
 8008034:	08008059 	.word	0x08008059
 8008038:	08008059 	.word	0x08008059
 800803c:	08008059 	.word	0x08008059
 8008040:	08008059 	.word	0x08008059
 8008044:	08008059 	.word	0x08008059
 8008048:	08008059 	.word	0x08008059
 800804c:	08008059 	.word	0x08008059
 8008050:	08008059 	.word	0x08008059
 8008054:	08008059 	.word	0x08008059
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008058:	bf00      	nop
  }

  return (USBD_OK);
 800805a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4805      	ldr	r0, [pc, #20]	; (800808c <CDC_Receive_FS+0x24>)
 8008076:	f7fe fbc1 	bl	80067fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800807a:	4804      	ldr	r0, [pc, #16]	; (800808c <CDC_Receive_FS+0x24>)
 800807c:	f7fe fc22 	bl	80068c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008080:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000388 	.word	0x20000388

08008090 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080a0:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <CDC_Transmit_FS+0x48>)
 80080a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e00b      	b.n	80080ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080b6:	887b      	ldrh	r3, [r7, #2]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4806      	ldr	r0, [pc, #24]	; (80080d8 <CDC_Transmit_FS+0x48>)
 80080be:	f7fe fb7b 	bl	80067b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080c2:	4805      	ldr	r0, [pc, #20]	; (80080d8 <CDC_Transmit_FS+0x48>)
 80080c4:	f7fe fbb8 	bl	8006838 <USBD_CDC_TransmitPacket>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000388 	.word	0x20000388

080080dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
	...

08008100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2212      	movs	r2, #18
 8008110:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008112:	4b03      	ldr	r3, [pc, #12]	; (8008120 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	200001e8 	.word	0x200001e8

08008124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	6039      	str	r1, [r7, #0]
 800812e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2204      	movs	r2, #4
 8008134:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008136:	4b03      	ldr	r3, [pc, #12]	; (8008144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200001fc 	.word	0x200001fc

08008148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4907      	ldr	r1, [pc, #28]	; (800817c <USBD_FS_ProductStrDescriptor+0x34>)
 800815e:	4808      	ldr	r0, [pc, #32]	; (8008180 <USBD_FS_ProductStrDescriptor+0x38>)
 8008160:	f7ff fdf8 	bl	8007d54 <USBD_GetString>
 8008164:	e004      	b.n	8008170 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4904      	ldr	r1, [pc, #16]	; (800817c <USBD_FS_ProductStrDescriptor+0x34>)
 800816a:	4805      	ldr	r0, [pc, #20]	; (8008180 <USBD_FS_ProductStrDescriptor+0x38>)
 800816c:	f7ff fdf2 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20001664 	.word	0x20001664
 8008180:	08008b4c 	.word	0x08008b4c

08008184 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	4904      	ldr	r1, [pc, #16]	; (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008196:	f7ff fddd 	bl	8007d54 <USBD_GetString>
  return USBD_StrDesc;
 800819a:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20001664 	.word	0x20001664
 80081a8:	08008b64 	.word	0x08008b64

080081ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	221a      	movs	r2, #26
 80081bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081be:	f000 f843 	bl	8008248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081c2:	4b02      	ldr	r3, [pc, #8]	; (80081cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000200 	.word	0x20000200

080081d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4907      	ldr	r1, [pc, #28]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081e6:	4808      	ldr	r0, [pc, #32]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081e8:	f7ff fdb4 	bl	8007d54 <USBD_GetString>
 80081ec:	e004      	b.n	80081f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4904      	ldr	r1, [pc, #16]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f4:	f7ff fdae 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20001664 	.word	0x20001664
 8008208:	08008b78 	.word	0x08008b78

0800820c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4907      	ldr	r1, [pc, #28]	; (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008222:	4808      	ldr	r0, [pc, #32]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008224:	f7ff fd96 	bl	8007d54 <USBD_GetString>
 8008228:	e004      	b.n	8008234 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008230:	f7ff fd90 	bl	8007d54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20001664 	.word	0x20001664
 8008244:	08008b84 	.word	0x08008b84

08008248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <Get_SerialNum+0x44>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <Get_SerialNum+0x48>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <Get_SerialNum+0x4c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800826e:	2208      	movs	r2, #8
 8008270:	4909      	ldr	r1, [pc, #36]	; (8008298 <Get_SerialNum+0x50>)
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 f814 	bl	80082a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008278:	2204      	movs	r2, #4
 800827a:	4908      	ldr	r1, [pc, #32]	; (800829c <Get_SerialNum+0x54>)
 800827c:	68b8      	ldr	r0, [r7, #8]
 800827e:	f000 f80f 	bl	80082a0 <IntToUnicode>
  }
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	1fff7a10 	.word	0x1fff7a10
 8008290:	1fff7a14 	.word	0x1fff7a14
 8008294:	1fff7a18 	.word	0x1fff7a18
 8008298:	20000202 	.word	0x20000202
 800829c:	20000212 	.word	0x20000212

080082a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	e027      	b.n	8008308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	0f1b      	lsrs	r3, r3, #28
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d80b      	bhi.n	80082d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4619      	mov	r1, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	440b      	add	r3, r1
 80082d0:	3230      	adds	r2, #48	; 0x30
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e00a      	b.n	80082ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0f1b      	lsrs	r3, r3, #28
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4619      	mov	r1, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	440b      	add	r3, r1
 80082e8:	3237      	adds	r2, #55	; 0x37
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	3301      	adds	r3, #1
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	3301      	adds	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	7dfa      	ldrb	r2, [r7, #23]
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3d3      	bcc.n	80082b8 <IntToUnicode+0x18>
  }
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008340:	d147      	bne.n	80083d2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008342:	2300      	movs	r3, #0
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	4b25      	ldr	r3, [pc, #148]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834a:	4a24      	ldr	r2, [pc, #144]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	6313      	str	r3, [r2, #48]	; 0x30
 8008352:	4b22      	ldr	r3, [pc, #136]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800835e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4619      	mov	r1, r3
 8008372:	481b      	ldr	r0, [pc, #108]	; (80083e0 <HAL_PCD_MspInit+0xc0>)
 8008374:	f7f8 ff50 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008378:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800837c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800837e:	2302      	movs	r3, #2
 8008380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008386:	2300      	movs	r3, #0
 8008388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800838a:	230a      	movs	r3, #10
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800838e:	f107 0314 	add.w	r3, r7, #20
 8008392:	4619      	mov	r1, r3
 8008394:	4812      	ldr	r0, [pc, #72]	; (80083e0 <HAL_PCD_MspInit+0xc0>)
 8008396:	f7f8 ff3f 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 800839c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839e:	4a0f      	ldr	r2, [pc, #60]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	6353      	str	r3, [r2, #52]	; 0x34
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	4a0b      	ldr	r2, [pc, #44]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 80083b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b4:	6453      	str	r3, [r2, #68]	; 0x44
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <HAL_PCD_MspInit+0xbc>)
 80083b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083c2:	2200      	movs	r2, #0
 80083c4:	2100      	movs	r1, #0
 80083c6:	2043      	movs	r0, #67	; 0x43
 80083c8:	f7f8 feef 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083cc:	2043      	movs	r0, #67	; 0x43
 80083ce:	f7f8 ff08 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083d2:	bf00      	nop
 80083d4:	3728      	adds	r7, #40	; 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40020000 	.word	0x40020000

080083e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fb4b 	bl	8006a96 <USBD_LL_SetupStage>
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	4619      	mov	r1, r3
 8008432:	f7fe fb85 	bl	8006b40 <USBD_LL_DataOutStage>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	334c      	adds	r3, #76	; 0x4c
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	4619      	mov	r1, r3
 8008466:	f7fe fc1e 	bl	8006ca6 <USBD_LL_DataInStage>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fd52 	bl	8006f2a <USBD_LL_SOF>
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008496:	2301      	movs	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
 80084a6:	e008      	b.n	80084ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d102      	bne.n	80084b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
 80084b4:	e001      	b.n	80084ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084b6:	f7f8 fb29 	bl	8000b0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c0:	7bfa      	ldrb	r2, [r7, #15]
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fcf2 	bl	8006eae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fc9a 	bl	8006e0a <USBD_LL_Reset>
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fced 	bl	8006ece <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <HAL_PCD_SuspendCallback+0x48>)
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	4a03      	ldr	r2, [pc, #12]	; (8008528 <HAL_PCD_SuspendCallback+0x48>)
 800851a:	f043 0306 	orr.w	r3, r3, #6
 800851e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed00 	.word	0xe000ed00

0800852c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fcdd 	bl	8006efa <USBD_LL_Resume>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fd35 	bl	8006fce <USBD_LL_IsoOUTIncomplete>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fcf1 	bl	8006f6a <USBD_LL_IsoINIncomplete>
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fd47 	bl	8007032 <USBD_LL_DevConnected>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fd44 	bl	8007048 <USBD_LL_DevDisconnected>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d13c      	bne.n	8008652 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085d8:	4a20      	ldr	r2, [pc, #128]	; (800865c <USBD_LL_Init+0x94>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <USBD_LL_Init+0x94>)
 80085e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085e8:	4b1c      	ldr	r3, [pc, #112]	; (800865c <USBD_LL_Init+0x94>)
 80085ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <USBD_LL_Init+0x94>)
 80085f2:	2204      	movs	r2, #4
 80085f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <USBD_LL_Init+0x94>)
 80085f8:	2202      	movs	r2, #2
 80085fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <USBD_LL_Init+0x94>)
 80085fe:	2200      	movs	r2, #0
 8008600:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <USBD_LL_Init+0x94>)
 8008604:	2202      	movs	r2, #2
 8008606:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008608:	4b14      	ldr	r3, [pc, #80]	; (800865c <USBD_LL_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <USBD_LL_Init+0x94>)
 8008610:	2200      	movs	r2, #0
 8008612:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <USBD_LL_Init+0x94>)
 8008616:	2200      	movs	r2, #0
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800861a:	4b10      	ldr	r3, [pc, #64]	; (800865c <USBD_LL_Init+0x94>)
 800861c:	2200      	movs	r2, #0
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <USBD_LL_Init+0x94>)
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008626:	480d      	ldr	r0, [pc, #52]	; (800865c <USBD_LL_Init+0x94>)
 8008628:	f7f9 fdc0 	bl	80021ac <HAL_PCD_Init>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008632:	f7f8 fa6b 	bl	8000b0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	4808      	ldr	r0, [pc, #32]	; (800865c <USBD_LL_Init+0x94>)
 800863a:	f7fb f818 	bl	800366e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800863e:	2240      	movs	r2, #64	; 0x40
 8008640:	2100      	movs	r1, #0
 8008642:	4806      	ldr	r0, [pc, #24]	; (800865c <USBD_LL_Init+0x94>)
 8008644:	f7fa ffcc 	bl	80035e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008648:	2280      	movs	r2, #128	; 0x80
 800864a:	2101      	movs	r1, #1
 800864c:	4803      	ldr	r0, [pc, #12]	; (800865c <USBD_LL_Init+0x94>)
 800864e:	f7fa ffc7 	bl	80035e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20001864 	.word	0x20001864

08008660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 feb5 	bl	80023e6 <HAL_PCD_Start>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f942 	bl	800890c <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	461a      	mov	r2, r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	70fb      	strb	r3, [r7, #3]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70bb      	strb	r3, [r7, #2]
 80086ac:	4613      	mov	r3, r2
 80086ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086be:	78bb      	ldrb	r3, [r7, #2]
 80086c0:	883a      	ldrh	r2, [r7, #0]
 80086c2:	78f9      	ldrb	r1, [r7, #3]
 80086c4:	f7fa fb86 	bl	8002dd4 <HAL_PCD_EP_Open>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f91c 	bl	800890c <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fa fbcf 	bl	8002ea4 <HAL_PCD_EP_Close>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f8fd 	bl	800890c <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fa fca7 	bl	8003092 <HAL_PCD_EP_SetStall>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f8de 	bl	800890c <USBD_Get_USB_Status>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008754:	7bbb      	ldrb	r3, [r7, #14]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7fa fcec 	bl	800315a <HAL_PCD_EP_ClrStall>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f8bf 	bl	800890c <USBD_Get_USB_Status>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008792:	7bbb      	ldrb	r3, [r7, #14]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0b      	bge.n	80087d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	333e      	adds	r3, #62	; 0x3e
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	e00b      	b.n	80087e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80087e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f7fa fab9 	bl	8002d8a <HAL_PCD_SetAddress>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f874 	bl	800890c <USBD_Get_USB_Status>
 8008824:	4603      	mov	r3, r0
 8008826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008828:	7bbb      	ldrb	r3, [r7, #14]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	460b      	mov	r3, r1
 8008840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008850:	7af9      	ldrb	r1, [r7, #11]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	f7fa fbd2 	bl	8002ffe <HAL_PCD_EP_Transmit>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f853 	bl	800890c <USBD_Get_USB_Status>
 8008866:	4603      	mov	r3, r0
 8008868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800886a:	7dbb      	ldrb	r3, [r7, #22]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	460b      	mov	r3, r1
 8008882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008892:	7af9      	ldrb	r1, [r7, #11]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	f7fa fb4e 	bl	8002f38 <HAL_PCD_EP_Receive>
 800889c:	4603      	mov	r3, r0
 800889e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f832 	bl	800890c <USBD_Get_USB_Status>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fa fb7e 	bl	8002fce <HAL_PCD_EP_GetRxCount>
 80088d2:	4603      	mov	r3, r0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <USBD_static_malloc+0x18>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20001d70 	.word	0x20001d70

080088f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d817      	bhi.n	8008950 <USBD_Get_USB_Status+0x44>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBD_Get_USB_Status+0x1c>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008939 	.word	0x08008939
 800892c:	0800893f 	.word	0x0800893f
 8008930:	08008945 	.word	0x08008945
 8008934:	0800894b 	.word	0x0800894b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	e00b      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800893e:	2303      	movs	r3, #3
 8008940:	73fb      	strb	r3, [r7, #15]
    break;
 8008942:	e008      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	e005      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
    break;
 800894e:	e002      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	bf00      	nop
  }
  return usb_status;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	4d0d      	ldr	r5, [pc, #52]	; (800899c <__libc_init_array+0x38>)
 8008968:	4c0d      	ldr	r4, [pc, #52]	; (80089a0 <__libc_init_array+0x3c>)
 800896a:	1b64      	subs	r4, r4, r5
 800896c:	10a4      	asrs	r4, r4, #2
 800896e:	2600      	movs	r6, #0
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	4d0b      	ldr	r5, [pc, #44]	; (80089a4 <__libc_init_array+0x40>)
 8008976:	4c0c      	ldr	r4, [pc, #48]	; (80089a8 <__libc_init_array+0x44>)
 8008978:	f000 f820 	bl	80089bc <_init>
 800897c:	1b64      	subs	r4, r4, r5
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	2600      	movs	r6, #0
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	08008bb4 	.word	0x08008bb4
 80089a0:	08008bb4 	.word	0x08008bb4
 80089a4:	08008bb4 	.word	0x08008bb4
 80089a8:	08008bb8 	.word	0x08008bb8

080089ac <memset>:
 80089ac:	4402      	add	r2, r0
 80089ae:	4603      	mov	r3, r0
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d100      	bne.n	80089b6 <memset+0xa>
 80089b4:	4770      	bx	lr
 80089b6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ba:	e7f9      	b.n	80089b0 <memset+0x4>

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
